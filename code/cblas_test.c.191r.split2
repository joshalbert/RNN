
;; Function main (main)

scanning new insn with uid = 51.
deleting insn with uid = 5.
deleting insn with uid = 5.
scanning new insn with uid = 52.
deleting insn with uid = 6.
deleting insn with uid = 6.
scanning new insn with uid = 53.
deleting insn with uid = 7.
deleting insn with uid = 7.
scanning new insn with uid = 54.
deleting insn with uid = 8.
deleting insn with uid = 8.
scanning new insn with uid = 55.
deleting insn with uid = 9.
deleting insn with uid = 9.
scanning new insn with uid = 56.
deleting insn with uid = 10.
deleting insn with uid = 10.
scanning new insn with uid = 57.
deleting insn with uid = 11.
deleting insn with uid = 11.
scanning new insn with uid = 58.
deleting insn with uid = 12.
deleting insn with uid = 12.
scanning new insn with uid = 59.
deleting insn with uid = 13.
deleting insn with uid = 13.
scanning new insn with uid = 60.
deleting insn with uid = 14.
deleting insn with uid = 14.
scanning new insn with uid = 61.
deleting insn with uid = 15.
deleting insn with uid = 15.
scanning new insn with uid = 62.
deleting insn with uid = 16.
deleting insn with uid = 16.
scanning new insn with uid = 63.
deleting insn with uid = 17.
deleting insn with uid = 17.
scanning new insn with uid = 64.
deleting insn with uid = 18.
deleting insn with uid = 18.
scanning new insn with uid = 65.
deleting insn with uid = 19.
deleting insn with uid = 19.
scanning new insn with uid = 66.
deleting insn with uid = 20.
deleting insn with uid = 20.
scanning new insn with uid = 67.
deleting insn with uid = 21.
deleting insn with uid = 21.
scanning new insn with uid = 68.
deleting insn with uid = 22.
deleting insn with uid = 22.
scanning new insn with uid = 69.
deleting insn with uid = 23.
deleting insn with uid = 23.
scanning new insn with uid = 70.
deleting insn with uid = 24.
deleting insn with uid = 24.
scanning new insn with uid = 71.
deleting insn with uid = 25.
deleting insn with uid = 25.
scanning new insn with uid = 72.
deleting insn with uid = 26.
deleting insn with uid = 26.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 37[r8]
;;  ref usage 	r0={17d,15u} r1={5d,2u} r2={4d,1u} r4={4d,1u} r5={5d,2u} r6={1d,14u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r20={1d,1u} r21={3d,1u} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,1u} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 169{127d,42u,0e} in 34{32 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 51 2 NOTE_INSN_FUNCTION_BEG)

(insn 51 2 52 2 cblas_test.c:6 (set (reg:DI 0 ax [62])
        (const_int 4607182418800017408 [0x3ff0000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 52 51 53 2 cblas_test.c:6 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 x+0 S8 A128])
        (reg:DI 0 ax [62])) 89 {*movdi_1_rex64} (nil))

(insn 53 52 54 2 cblas_test.c:6 (set (reg:DI 0 ax [63])
        (const_int 4611686018427387904 [0x4000000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 54 53 55 2 cblas_test.c:6 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 x+8 S8 A64])
        (reg:DI 0 ax [63])) 89 {*movdi_1_rex64} (nil))

(insn 55 54 56 2 cblas_test.c:6 (set (reg:DI 0 ax [64])
        (const_int 4613937818241073152 [0x4008000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 56 55 57 2 cblas_test.c:6 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 x+16 S8 A128])
        (reg:DI 0 ax [64])) 89 {*movdi_1_rex64} (nil))

(insn 57 56 58 2 cblas_test.c:6 (set (reg:DI 0 ax [65])
        (const_int 4616189618054758400 [0x4010000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 58 57 59 2 cblas_test.c:6 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+24 S8 A64])
        (reg:DI 0 ax [65])) 89 {*movdi_1_rex64} (nil))

(insn 59 58 60 2 cblas_test.c:6 (set (reg:DI 0 ax [66])
        (const_int 4617315517961601024 [0x4014000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 60 59 61 2 cblas_test.c:6 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+32 S8 A128])
        (reg:DI 0 ax [66])) 89 {*movdi_1_rex64} (nil))

(insn 61 60 62 2 cblas_test.c:7 (set (reg:DI 0 ax [67])
        (const_int 4607182418800017408 [0x3ff0000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 62 61 63 2 cblas_test.c:7 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 y+0 S8 A128])
        (reg:DI 0 ax [67])) 89 {*movdi_1_rex64} (nil))

(insn 63 62 64 2 cblas_test.c:7 (set (reg:DI 0 ax [68])
        (const_int 4607182418800017408 [0x3ff0000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 64 63 65 2 cblas_test.c:7 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 y+8 S8 A64])
        (reg:DI 0 ax [68])) 89 {*movdi_1_rex64} (nil))

(insn 65 64 66 2 cblas_test.c:7 (set (reg:DI 0 ax [69])
        (const_int 4607182418800017408 [0x3ff0000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 66 65 67 2 cblas_test.c:7 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 y+16 S8 A128])
        (reg:DI 0 ax [69])) 89 {*movdi_1_rex64} (nil))

(insn 67 66 68 2 cblas_test.c:7 (set (reg:DI 0 ax [70])
        (const_int 4607182418800017408 [0x3ff0000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 68 67 69 2 cblas_test.c:7 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 y+24 S8 A64])
        (reg:DI 0 ax [70])) 89 {*movdi_1_rex64} (nil))

(insn 69 68 70 2 cblas_test.c:7 (set (reg:DI 0 ax [71])
        (const_int 4607182418800017408 [0x3ff0000000000000])) 89 {*movdi_1_rex64} (nil))

(insn 70 69 71 2 cblas_test.c:7 (set (mem/s/j:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 y+32 S8 A128])
        (reg:DI 0 ax [71])) 89 {*movdi_1_rex64} (nil))

(insn 71 70 72 2 cblas_test.c:8 (set (reg:DI 1 dx [72])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -96 [0xffffffffffffffa0]))) 249 {*lea_1} (nil))

(insn 72 71 27 2 cblas_test.c:8 (set (reg:DI 0 ax [73])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -48 [0xffffffffffffffd0]))) 249 {*lea_1} (nil))

(insn 27 72 28 2 cblas_test.c:8 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) 47 {*movsi_1} (nil))

(insn 28 27 29 2 cblas_test.c:8 (set (reg:DI 2 cx)
        (reg:DI 1 dx [72])) 89 {*movdi_1_rex64} (nil))

(insn 29 28 30 2 cblas_test.c:8 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) 47 {*movsi_1} (nil))

(insn 30 29 31 2 cblas_test.c:8 (set (reg:DI 4 si)
        (reg:DI 0 ax [73])) 89 {*movdi_1_rex64} (nil))

(insn 31 30 32 2 cblas_test.c:8 (set (reg:SI 5 di)
        (const_int 2 [0x2])) 47 {*movsi_1} (nil))

(call_insn 32 31 34 2 cblas_test.c:8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cblas_ddot") [flags 0x41]  <function_decl 0x7fd89998f600 cblas_ddot>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 37 r8))
                        (nil)))))))

(insn 34 32 36 2 cblas_test.c:8 (set (reg/f:DI 0 ax [orig:59 D.4916 ] [59])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <string_cst 0x7fd8999e0c80>)) 89 {*movdi_1_rex64} (nil))

(insn 36 34 37 2 cblas_test.c:8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:59 D.4916 ] [59])) 89 {*movdi_1_rex64} (nil))

(insn 37 36 38 2 cblas_test.c:8 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) 62 {*movqi_1} (nil))

(call_insn 38 37 39 2 cblas_test.c:8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd89abfb000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DF 21 xmm0))
                (nil)))))

(insn 39 38 47 2 cblas_test.c:9 (set (reg:SI 0 ax [orig:60 D.4917 ] [60])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(insn 47 39 50 2 cblas_test.c:10 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 50 47 0 NOTE_INSN_DELETED)

