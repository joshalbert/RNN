
;; Function W_init (W_init)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r87: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a14 (r87,l0) best SSE_REGS, cover SSE_REGS
    r86: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a22 (r86,l0) best AREG, cover GENERAL_REGS
    r85: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r85,l0) best DIREG, cover GENERAL_REGS
    r84: preferred DREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a1 (r84,l0) best DREG, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r78,l0) best CREG, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a13 (r76,l0) best SSE_REGS, cover SSE_REGS
    r75: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a15 (r75,l0) best SSE_REGS, cover SSE_REGS
    r74: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a16 (r74,l0) best AREG, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a23 (r64,l0) best DIREG, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r84,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a2(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a5(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a7(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a8(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a9(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a10(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a11(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a12(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a13(r76,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a14(r87,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a15(r75,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:16
  a16(r74,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a17(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a18(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a19(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a20(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a21(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a22(r86,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a23(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a24(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a25(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a26(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a27(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a28(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a29(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8

   Insn 66(l0): point = 1
   Insn 65(l0): point = 3
   Insn 64(l0): point = 5
   Insn 63(l0): point = 7
   Insn 62(l0): point = 9
   Insn 61(l0): point = 11
   Insn 60(l0): point = 13
   Insn 59(l0): point = 15
   Insn 58(l0): point = 17
   Insn 57(l0): point = 19
   Insn 56(l0): point = 21
   Insn 55(l0): point = 23
   Insn 54(l0): point = 25
   Insn 53(l0): point = 27
   Insn 51(l0): point = 30
   Insn 50(l0): point = 32
   Insn 49(l0): point = 34
   Insn 47(l0): point = 37
   Insn 46(l0): point = 39
   Insn 44(l0): point = 41
   Insn 43(l0): point = 43
   Insn 42(l0): point = 45
   Insn 39(l0): point = 48
   Insn 38(l0): point = 50
   Insn 37(l0): point = 52
   Insn 36(l0): point = 54
   Insn 35(l0): point = 56
   Insn 34(l0): point = 58
   Insn 33(l0): point = 60
   Insn 32(l0): point = 62
   Insn 31(l0): point = 64
   Insn 30(l0): point = 66
   Insn 29(l0): point = 68
   Insn 71(l0): point = 71
   Insn 25(l0): point = 73
   Insn 24(l0): point = 75
   Insn 23(l0): point = 77
   Insn 22(l0): point = 79
   Insn 21(l0): point = 81
   Insn 20(l0): point = 83
   Insn 19(l0): point = 85
   Insn 18(l0): point = 87
   Insn 17(l0): point = 89
   Insn 16(l0): point = 91
   Insn 15(l0): point = 93
   Insn 14(l0): point = 95
   Insn 13(l0): point = 97
   Insn 10(l0): point = 100
   Insn 9(l0): point = 102
   Insn 7(l0): point = 105
   Insn 6(l0): point = 107
   Insn 5(l0): point = 109
 a0(r85): [6..13]
 a1(r84): [10..15]
 a2(r78): [12..27]
 a3(r83): [16..17]
 a4(r82): [18..19]
 a5(r80): [18..23]
 a6(r81): [20..21]
 a7(r79): [24..25]
 a8(r77): [33..34]
 a9(r69): [40..41]
 a10(r68): [42..43]
 a11(r67): [42..45]
 a12(r73): [51..62]
 a13(r76): [51..52]
 a14(r87): [53..54]
 a15(r75): [53..56]
 a16(r74): [57..58]
 a17(r72): [63..64]
 a18(r70): [63..68]
 a19(r71): [65..66]
 a20(r66): [76..77]
 a21(r65): [78..79]
 a22(r86): [80..81]
 a23(r64): [86..87]
 a24(r63): [88..89]
 a25(r62): [90..91]
 a26(r60): [90..95]
 a27(r61): [92..93]
 a28(r59): [96..97]
 a29(r58): [108..109]
Compressing live ranges: from 112 to 54 - 48%
Ranges after the compression:
 a0(r85): [0..3]
 a1(r84): [1..4]
 a2(r78): [2..14]
 a3(r83): [5..6]
 a4(r82): [7..8]
 a5(r80): [7..11]
 a6(r81): [9..10]
 a7(r79): [12..13]
 a8(r77): [15..16]
 a9(r69): [17..18]
 a10(r68): [19..20]
 a11(r67): [19..21]
 a12(r73): [22..29]
 a13(r76): [22..23]
 a14(r87): [24..25]
 a15(r75): [24..26]
 a16(r74): [27..28]
 a17(r72): [30..31]
 a18(r70): [30..34]
 a19(r71): [32..33]
 a20(r66): [35..36]
 a21(r65): [37..38]
 a22(r86): [39..40]
 a23(r64): [41..42]
 a24(r63): [43..44]
 a25(r62): [45..46]
 a26(r60): [45..49]
 a27(r61): [47..48]
 a28(r59): [50..51]
 a29(r58): [52..53]
  regions=2, blocks=10, points=54
    allocnos=30, copies=0, conflicts=0, ranges=30
Disposition:
   29:r58  l0     0   28:r59  l0     0   26:r60  l0     1   27:r61  l0     0
   25:r62  l0     0   24:r63  l0     0   23:r64  l0     0   21:r65  l0     0
   20:r66  l0     0   11:r67  l0     1   10:r68  l0     0    9:r69  l0     0
   18:r70  l0     0   19:r71  l0     1   17:r72  l0     1   12:r73  l0     3
   16:r74  l0     0   15:r75  l0    21   13:r76  l0    21    8:r77  l0     0
    2:r78  l0     1    7:r79  l0     0    5:r80  l0     2    6:r81  l0     0
    4:r82  l0     0    3:r83  l0     0    1:r84  l0     3    0:r85  l0     0
   22:r86  l0     0   14:r87  l0    22
+++Costs: overall -6, reg -6, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 58
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 5
insn=10, live_throughout: 7, dead_or_set: 0, 5
insn=11, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 59
insn=14, live_throughout: 7, dead_or_set: 59, 60
insn=15, live_throughout: 7, 60, dead_or_set: 61
insn=16, live_throughout: 7, 60, dead_or_set: 61, 62
insn=17, live_throughout: 7, dead_or_set: 60, 62, 63
insn=18, live_throughout: 7, dead_or_set: 63, 64
insn=19, live_throughout: 7, dead_or_set: 5, 64
insn=20, live_throughout: 7, dead_or_set: 0, 5
insn=21, live_throughout: 7, dead_or_set: 0, 86
insn=22, live_throughout: 7, dead_or_set: 65, 86
insn=23, live_throughout: 7, dead_or_set: 65, 66
insn=24, live_throughout: 7, dead_or_set: 66
insn=25, live_throughout: 7, dead_or_set: 
insn=71, live_throughout: 7, dead_or_set: 
insn=45, live_throughout: 7, dead_or_set: 
insn=29, live_throughout: 7, dead_or_set: 70
insn=30, live_throughout: 7, 70, dead_or_set: 71
insn=31, live_throughout: 7, 70, dead_or_set: 71, 72
insn=32, live_throughout: 7, dead_or_set: 70, 72, 73
insn=33, live_throughout: 7, 73, dead_or_set: 0
insn=34, live_throughout: 7, 73, dead_or_set: 0, 74
insn=35, live_throughout: 7, 73, dead_or_set: 74, 75
insn=36, live_throughout: 7, 73, 75, dead_or_set: 87
insn=37, live_throughout: 7, 73, dead_or_set: 75, 76, 87
insn=38, live_throughout: 7, dead_or_set: 73, 76
insn=39, live_throughout: 7, dead_or_set: 
insn=40, live_throughout: 7, dead_or_set: 
insn=42, live_throughout: 7, dead_or_set: 67
insn=43, live_throughout: 7, 67, dead_or_set: 68
insn=44, live_throughout: 7, dead_or_set: 67, 68, 69
insn=46, live_throughout: 7, dead_or_set: 69
insn=47, live_throughout: 7, dead_or_set: 
insn=49, live_throughout: 7, dead_or_set: 77
insn=50, live_throughout: 7, dead_or_set: 77
insn=51, live_throughout: 7, dead_or_set: 
insn=53, live_throughout: 7, dead_or_set: 78
insn=54, live_throughout: 7, 78, dead_or_set: 79
insn=55, live_throughout: 7, 78, dead_or_set: 79, 80
insn=56, live_throughout: 7, 78, 80, dead_or_set: 81
insn=57, live_throughout: 7, 78, 80, dead_or_set: 81, 82
insn=58, live_throughout: 7, 78, dead_or_set: 80, 82, 83
insn=59, live_throughout: 7, 78, dead_or_set: 83, 84
insn=60, live_throughout: 7, 78, 84, dead_or_set: 85
insn=61, live_throughout: 7, 84, 85, dead_or_set: 2, 78
insn=62, live_throughout: 2, 7, 85, dead_or_set: 1, 84
insn=63, live_throughout: 1, 2, 7, 85, dead_or_set: 4
insn=64, live_throughout: 1, 2, 4, 7, dead_or_set: 5, 85
insn=65, live_throughout: 1, 2, 4, 5, 7, dead_or_set: 0
insn=66, live_throughout: 7, dead_or_set: 0, 1, 2, 4, 5
insn=69, live_throughout: 7, dead_or_set: 
changing reg in insn 5
changing reg in insn 6
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 17
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 29
changing reg in insn 32
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 38
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 61
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 58
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 62
changing reg in insn 60
changing reg in insn 64
changing reg in insn 21
changing reg in insn 22
changing reg in insn 36
changing reg in insn 37
deleting insn with uid = 21.
deleting insn with uid = 22.
deleting insn with uid = 23.
deleting insn with uid = 34.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 66.


W_init

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={21d,18u} r1={11d,6u} r2={7d,2u} r3={2d,2u} r4={6d,1u} r5={8d,3u} r6={1d,14u} r7={1d,13u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={15d,3u} r18={4d} r19={4d} r20={1d,1u} r21={7d,2u} r22={6d,1u} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 304{238d,66u,0e} in 48{44 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 58

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 node.h:39 (set (reg:SI 0 ax [orig:58 debug.69 ] [58])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 6 5 7 2 node.h:39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:58 debug.69 ] [58])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 7 6 8 2 node.h:39 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 11)
            (pc))) 616 {*jcc_1} (nil)
 -> 11)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  2 (fallthru)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 10 3 node.h:39 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <string_cst 0x7f2f6b9d3508>)) 89 {*movdi_1_rex64} (nil))

(call_insn 10 9 11 3 node.h:39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f2f6d752700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 86

;; Pred edge  2
;; Pred edge  3 (fallthru)
(code_label 11 10 12 4 2 "" [1 uses])

(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 4 node.h:41 (set (reg:SI 0 ax [orig:59 D.70 ] [59])
        (mem/c/i:SI (symbol_ref:DI ("D")  <var_decl 0x7f2f6c4b8e60 D>) [0 D+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 14 13 15 4 node.h:41 (set (reg:DI 1 dx [orig:60 D.49971 ] [60])
        (zero_extend:DI (reg:SI 0 ax [orig:59 D.70 ] [59]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 15 14 16 4 node.h:41 (set (reg:SI 0 ax [orig:61 network_size.71 ] [61])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 16 15 17 4 node.h:41 (set (reg:DI 0 ax [orig:62 D.49973 ] [62])
        (zero_extend:DI (reg:SI 0 ax [orig:61 network_size.71 ] [61]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 17 16 18 4 node.h:41 (parallel [
            (set (reg:DI 0 ax [orig:63 D.49974 ] [63])
                (mult:DI (reg:DI 0 ax [orig:62 D.49973 ] [62])
                    (reg:DI 1 dx [orig:60 D.49971 ] [60])))
            (clobber (reg:CC 17 flags))
        ]) 334 {*muldi3_1} (nil))

(insn 18 17 19 4 node.h:41 (parallel [
            (set (reg:DI 0 ax [orig:64 D.49975 ] [64])
                (ashift:DI (reg:DI 0 ax [orig:63 D.49974 ] [63])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 19 18 20 4 node.h:41 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:64 D.49975 ] [64])) 89 {*movdi_1_rex64} (nil))

(call_insn 20 19 24 4 node.h:41 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f2f6d770700 malloc>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 24 20 25 4 node.h:41 (set (mem/f/c/i:DI (symbol_ref:DI ("W")  <var_decl 0x7f2f6c4b8c80 W>) [0 W+0 S8 A64])
        (reg/f:DI 0 ax [orig:66 W.72 ] [66])) 89 {*movdi_1_rex64} (nil))

(insn 25 24 71 4 node.h:42 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 71 25 72 4 node.h:42 (set (pc)
        (label_ref 40)) 631 {jump} (nil)
 -> 40)
;; End of basic block 4 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 [100.0%] 

(barrier 72 71 45)

;; Start of basic block ( 6) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 71 72 73 74 75 76 87

;; Pred edge  6
(code_label 45 72 28 5 4 "" [1 uses])

(note 28 45 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 29 28 30 5 node.h:44 (set (reg/f:DI 0 ax [orig:70 W.73 ] [70])
        (mem/f/c/i:DI (symbol_ref:DI ("W")  <var_decl 0x7f2f6c4b8c80 W>) [0 W+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 30 29 31 5 node.h:44 (set (reg:DI 1 dx [orig:71 D.49979 ] [71])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 31 30 32 5 node.h:44 (parallel [
            (set (reg:DI 1 dx [orig:72 D.49980 ] [72])
                (ashift:DI (reg:DI 1 dx [orig:71 D.49979 ] [71])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 32 31 33 5 node.h:44 (parallel [
            (set (reg/f:DI 3 bx [orig:73 D.49981 ] [73])
                (plus:DI (reg/f:DI 0 ax [orig:70 W.73 ] [70])
                    (reg:DI 1 dx [orig:72 D.49980 ] [72])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(call_insn 33 32 35 5 node.h:44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f2f6c515100 rand>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 35 33 36 5 node.h:44 (set (reg:DF 21 xmm0 [orig:75 D.49983 ] [75])
        (float:DF (reg:SI 0 ax [orig:74 D.49982 ] [74]))) 218 {*floatsidf2_sse_interunit} (nil))

(insn 36 35 37 5 node.h:44 (set (reg:DF 22 xmm1 [87])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (expr_list:REG_EQUAL (const_double:DF 2.147483647e+9 [0x0.fffffffep+31])
        (nil)))

(insn 37 36 38 5 node.h:44 (set (reg:DF 21 xmm0 [orig:76 D.49984 ] [76])
        (div:DF (reg:DF 21 xmm0 [orig:75 D.49983 ] [75])
            (reg:DF 22 xmm1 [87]))) 724 {*fop_df_1_sse} (nil))

(insn 38 37 39 5 node.h:44 (set (mem:DF (reg/f:DI 3 bx [orig:73 D.49981 ] [73]) [0 S8 A64])
        (reg:DF 21 xmm0 [orig:76 D.49984 ] [76])) 104 {*movdf_integer_rex64} (nil))

(insn 39 38 40 5 node.h:42 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 67 68 69

;; Pred edge  5 (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 40 39 41 6 3 "" [1 uses])

(note 41 40 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 6 node.h:42 (set (reg:SI 1 dx [orig:67 D.74 ] [67])
        (mem/c/i:SI (symbol_ref:DI ("D")  <var_decl 0x7f2f6c4b8e60 D>) [0 D+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 43 42 44 6 node.h:42 (set (reg:SI 0 ax [orig:68 network_size.75 ] [68])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 44 43 46 6 node.h:42 (parallel [
            (set (reg:SI 0 ax [orig:69 D.49987 ] [69])
                (mult:SI (reg:SI 0 ax [orig:68 network_size.75 ] [68])
                    (reg:SI 1 dx [orig:67 D.74 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) 333 {*mulsi3_1} (nil))

(insn 46 44 47 6 node.h:42 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:69 D.49987 ] [69])
            (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 47 46 48 6 node.h:42 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 616 {*jcc_1} (nil)
 -> 45)
;; End of basic block 6 -> ( 5 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5
;; Succ edge  7 (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 77

;; Pred edge  6 (fallthru)
(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 7 node.h:47 (set (reg:SI 0 ax [orig:77 debug.76 ] [77])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 50 49 51 7 node.h:47 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:77 debug.76 ] [77])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 51 50 52 7 node.h:47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 69)
            (pc))) 616 {*jcc_1} (nil)
 -> 69)
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  9

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78 79 80 81 82 83 84 85

;; Pred edge  7 (fallthru)
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 8 node.h:47 (set (reg/f:DI 1 dx [orig:78 W.77 ] [78])
        (mem/f/c/i:DI (symbol_ref:DI ("W")  <var_decl 0x7f2f6c4b8c80 W>) [0 W+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 54 53 55 8 node.h:49 (set (reg:SI 0 ax [orig:79 D.78 ] [79])
        (mem/c/i:SI (symbol_ref:DI ("D")  <var_decl 0x7f2f6c4b8e60 D>) [0 D+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 55 54 56 8 node.h:49 (set (reg:DI 2 cx [orig:80 D.49993 ] [80])
        (zero_extend:DI (reg:SI 0 ax [orig:79 D.78 ] [79]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 56 55 57 8 node.h:49 (set (reg:SI 0 ax [orig:81 network_size.79 ] [81])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 57 56 58 8 node.h:49 (set (reg:DI 0 ax [orig:82 D.49995 ] [82])
        (zero_extend:DI (reg:SI 0 ax [orig:81 network_size.79 ] [81]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 58 57 59 8 node.h:49 (parallel [
            (set (reg:DI 0 ax [orig:83 D.49996 ] [83])
                (mult:DI (reg:DI 0 ax [orig:82 D.49995 ] [82])
                    (reg:DI 2 cx [orig:80 D.49993 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) 334 {*muldi3_1} (nil))

(insn 59 58 60 8 node.h:47 (parallel [
            (set (reg:DI 3 bx [orig:84 D.49997 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 D.49996 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 60 59 61 8 node.h:47 (set (reg/f:DI 0 ax [orig:85 D.49998 ] [85])
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <string_cst 0x7f2f6b9f3000>)) 89 {*movdi_1_rex64} (nil))

(insn 61 60 62 8 node.h:47 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:78 W.77 ] [78])) 89 {*movdi_1_rex64} (nil))

(insn 62 61 63 8 node.h:47 (set (reg:DI 1 dx)
        (reg:DI 3 bx [orig:84 D.49997 ] [84])) 89 {*movdi_1_rex64} (nil))

(insn 63 62 64 8 node.h:47 (set (reg:DI 4 si)
        (symbol_ref:DI ("clock") [flags 0x41]  <function_decl 0x7f2f6c52e900 clock>)) 89 {*movdi_1_rex64} (nil))

(insn 64 63 65 8 node.h:47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:85 D.49998 ] [85])) 89 {*movdi_1_rex64} (nil))

(insn 65 64 66 8 node.h:47 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 66 65 69 8 node.h:47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                        (nil)))))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)

;; Start of basic block ( 8 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  8 (fallthru)
;; Pred edge  7
(code_label 69 66 70 9 1 "" [1 uses])

(note 70 69 73 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 9 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 73 70 0 NOTE_INSN_DELETED)


;; Function W_term (W_term)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a1 (r59,l0) best DIREG, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a1(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8

   Insn 21(l0): point = 1
   Insn 20(l0): point = 3
   Insn 18(l0): point = 6
   Insn 17(l0): point = 8
   Insn 16(l0): point = 10
   Insn 15(l0): point = 12
   Insn 14(l0): point = 14
   Insn 13(l0): point = 16
   Insn 10(l0): point = 19
   Insn 9(l0): point = 21
   Insn 7(l0): point = 24
   Insn 6(l0): point = 26
   Insn 5(l0): point = 28
 a0(r60): [9..10]
 a1(r59): [15..16]
 a2(r58): [27..28]
Compressing live ranges: from 31 to 6 - 19%
Ranges after the compression:
 a0(r60): [0..1]
 a1(r59): [2..3]
 a2(r58): [4..5]
  regions=1, blocks=7, points=6
    allocnos=3, copies=0, conflicts=0, ranges=3
Disposition:
    2:r58  l0     0    1:r59  l0     0    0:r60  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 58
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 5
insn=10, live_throughout: 7, dead_or_set: 0, 5
insn=11, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 59
insn=14, live_throughout: 7, dead_or_set: 5, 59
insn=15, live_throughout: 7, dead_or_set: 5
insn=16, live_throughout: 7, dead_or_set: 60
insn=17, live_throughout: 7, dead_or_set: 60
insn=18, live_throughout: 7, dead_or_set: 
insn=20, live_throughout: 7, dead_or_set: 5
insn=21, live_throughout: 7, dead_or_set: 0, 5
insn=24, live_throughout: 7, dead_or_set: 
changing reg in insn 5
changing reg in insn 6
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 21.


W_term

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={7d,3u} r1={4d} r2={4d} r4={4d} r5={7d,3u} r6={1d,6u} r7={1d,9u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={5d,2u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 182{158d,24u,0e} in 13{10 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 58

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 node.h:54 (set (reg:SI 0 ax [orig:58 debug.66 ] [58])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 6 5 7 2 node.h:54 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:58 debug.66 ] [58])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 7 6 8 2 node.h:54 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 11)
            (pc))) 616 {*jcc_1} (nil)
 -> 11)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  2 (fallthru)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 10 3 node.h:54 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <string_cst 0x7f2f6b9c8ea0>)) 89 {*movdi_1_rex64} (nil))

(call_insn 10 9 11 3 node.h:54 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f2f6d752700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60

;; Pred edge  2
;; Pred edge  3 (fallthru)
(code_label 11 10 12 4 7 "" [1 uses])

(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 4 node.h:55 (set (reg/f:DI 0 ax [orig:59 W.67 ] [59])
        (mem/f/c/i:DI (symbol_ref:DI ("W")  <var_decl 0x7f2f6c4b8c80 W>) [0 W+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 14 13 15 4 node.h:55 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:59 W.67 ] [59])) 89 {*movdi_1_rex64} (nil))

(call_insn 15 14 16 4 node.h:55 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f2f6d767c00 free>) [0 S1 A8])
        (const_int 0 [0x0])) 639 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 16 15 17 4 node.h:56 (set (reg:SI 0 ax [orig:60 debug.68 ] [60])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 17 16 18 4 node.h:56 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:60 debug.68 ] [60])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 18 17 19 4 node.h:56 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 24)
            (pc))) 616 {*jcc_1} (nil)
 -> 24)
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  6

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  4 (fallthru)
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 5 node.h:56 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <string_cst 0x7f2f6b9c8ed0>)) 89 {*movdi_1_rex64} (nil))

(call_insn 21 20 24 5 node.h:56 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f2f6d752700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  5 (fallthru)
;; Pred edge  4
(code_label 24 21 25 6 6 "" [1 uses])

(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 26 25 0 NOTE_INSN_DELETED)


;; Function get_input (get_input)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 17 count 17 (  1.2)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r76: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a3 (r76,l0) best SIREG, cover GENERAL_REGS
    r75: preferred DREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a4 (r75,l0) best DREG, cover GENERAL_REGS
    r74: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a6 (r74,l0) best SSE_REGS, cover SSE_REGS
    r73: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a9 (r73,l0) best SSE_REGS, cover SSE_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a11 (r70,l0) best SSE_REGS, cover SSE_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a15 (r66,l0) best SSE_REGS, cover SSE_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a0 (r64,l0) best SSE_FIRST_REG, cover SSE_REGS
    r63: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r63,l0) best DIREG, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a7 (r61,l0) best SSE_REGS, cover SSE_REGS
    r60: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a10 (r60,l0) best SSE_REGS, cover SSE_REGS
    r59: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a8 (r59,l0) best SSE_REGS, cover SSE_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r64,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 FP_TOP_REG:4,4 FP_SECOND_REG:4,4 FLOAT_REGS:4,4 MEM:11
  a1(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:11
  a2(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r75,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a5(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a6(r74,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a7(r61,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:15
  a8(r59,l0) costs: AREG:39,39 DREG:39,39 CREG:39,39 BREG:39,39 SIREG:39,39 DIREG:39,39 AD_REGS:39,39 CLOBBERED_REGS:39,39 Q_REGS:39,39 NON_Q_REGS:39,39 LEGACY_REGS:39,39 GENERAL_REGS:39,39 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:63,63 FP_SECOND_REG:63,63 FLOAT_REGS:63,63 MEM:24
  a9(r73,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a10(r60,l0) costs: AREG:39,39 DREG:39,39 CREG:39,39 BREG:39,39 SIREG:39,39 DIREG:39,39 AD_REGS:39,39 CLOBBERED_REGS:39,39 Q_REGS:39,39 NON_Q_REGS:39,39 LEGACY_REGS:39,39 GENERAL_REGS:39,39 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:63,63 FP_SECOND_REG:63,63 FLOAT_REGS:63,63 MEM:23
  a11(r70,l0) costs: AREG:39,39 DREG:39,39 CREG:39,39 BREG:39,39 SIREG:39,39 DIREG:39,39 AD_REGS:39,39 CLOBBERED_REGS:39,39 Q_REGS:39,39 NON_Q_REGS:39,39 LEGACY_REGS:39,39 GENERAL_REGS:39,39 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:63,63 FP_SECOND_REG:63,63 FLOAT_REGS:63,63 MEM:22
  a12(r71,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:54,54 SSE_REGS:54,54 MMX_REGS:54,54 MEM:15
  a13(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a14(r69,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:67,67 SSE_REGS:67,67 MMX_REGS:67,67 MEM:20
  a15(r66,l0) costs: AREG:39,39 DREG:39,39 CREG:39,39 BREG:39,39 SIREG:39,39 DIREG:39,39 AD_REGS:39,39 CLOBBERED_REGS:39,39 Q_REGS:39,39 NON_Q_REGS:39,39 LEGACY_REGS:39,39 GENERAL_REGS:39,39 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:63,63 FP_SECOND_REG:63,63 FLOAT_REGS:63,63 MEM:22
  a16(r67,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:54,54 SSE_REGS:54,54 MMX_REGS:54,54 MEM:15
  a17(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a18(r65,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:67,67 SSE_REGS:67,67 MMX_REGS:67,67 MEM:20

   Insn 70(l0): point = 0
   Insn 67(l0): point = 2
   Insn 63(l0): point = 4
   Insn 60(l0): point = 7
   Insn 83(l0): point = 10
   Insn 55(l0): point = 12
   Insn 52(l0): point = 15
   Insn 51(l0): point = 17
   Insn 50(l0): point = 19
   Insn 49(l0): point = 21
   Insn 48(l0): point = 23
   Insn 47(l0): point = 25
   Insn 46(l0): point = 27
   Insn 45(l0): point = 29
   Insn 43(l0): point = 32
   Insn 42(l0): point = 34
   Insn 41(l0): point = 36
   Insn 39(l0): point = 39
   Insn 38(l0): point = 41
   Insn 37(l0): point = 43
   Insn 36(l0): point = 45
   Insn 35(l0): point = 47
   Insn 34(l0): point = 49
   Insn 32(l0): point = 52
   Insn 31(l0): point = 54
   Insn 30(l0): point = 56
   Insn 29(l0): point = 58
   Insn 28(l0): point = 60
   Insn 81(l0): point = 63
   Insn 24(l0): point = 65
   Insn 23(l0): point = 68
   Insn 22(l0): point = 70
   Insn 21(l0): point = 72
   Insn 19(l0): point = 75
   Insn 18(l0): point = 77
   Insn 17(l0): point = 79
   Insn 16(l0): point = 81
   Insn 15(l0): point = 83
   Insn 79(l0): point = 86
   Insn 11(l0): point = 88
   Insn 10(l0): point = 91
   Insn 9(l0): point = 93
   Insn 8(l0): point = 95
   Insn 7(l0): point = 97
   Insn 3(l0): point = 99
   Insn 2(l0): point = 101
 a0(r64): [3..4]
 a1(r58): [10..12] [5..7]
 a2(r63): [20..29]
 a3(r76): [22..25]
 a4(r75): [24..27]
 a5(r62): [35..36]
 a6(r74): [44..45]
 a7(r61): [46..47]
 a8(r59): [86..88] [46..75]
 a9(r73): [48..49]
 a10(r60): [63..65] [48..52]
 a11(r70): [53..54]
 a12(r71): [55..60]
 a13(r72): [57..58]
 a14(r69): [66..72] [59..62]
 a15(r66): [76..77]
 a16(r67): [78..83]
 a17(r68): [80..81]
 a18(r65): [89..95] [82..85]
Compressing live ranges: from 104 to 46 - 44%
Ranges after the compression:
 a0(r64): [0..1]
 a1(r58): [4..5] [2..3]
 a2(r63): [6..11]
 a3(r76): [7..9]
 a4(r75): [8..10]
 a5(r62): [12..13]
 a6(r74): [14..15]
 a7(r61): [16..17]
 a8(r59): [42..43] [16..33]
 a9(r73): [18..19]
 a10(r60): [29..30] [18..20]
 a11(r70): [21..22]
 a12(r71): [23..27]
 a13(r72): [24..25]
 a14(r69): [31..32] [26..28]
 a15(r66): [34..35]
 a16(r67): [36..40]
 a17(r68): [37..38]
 a18(r65): [44..45] [39..41]
  regions=1, blocks=14, points=46
    allocnos=19, copies=0, conflicts=0, ranges=24
Disposition:
    1:r58  l0     0    8:r59  l0    21   10:r60  l0    22    7:r61  l0    22
    5:r62  l0     0    2:r63  l0     0    0:r64  l0    21   18:r65  l0     0
   15:r66  l0    21   16:r67  l0     1   17:r68  l0     0   14:r69  l0     0
   11:r70  l0    22   12:r71  l0     1   13:r72  l0     0    9:r73  l0    23
    6:r74  l0    21    4:r75  l0     1    3:r76  l0     2
+++Costs: overall 4, reg 4, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 4, 7, dead_or_set: 5
insn=3, live_throughout: 7, dead_or_set: 4
insn=7, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 65
insn=9, live_throughout: 7, 65, dead_or_set: 
insn=10, live_throughout: 7, 65, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 59, 65
insn=79, live_throughout: 7, 59, dead_or_set: 
insn=14, live_throughout: 7, 65, dead_or_set: 
insn=15, live_throughout: 7, 65, dead_or_set: 67
insn=16, live_throughout: 7, 67, dead_or_set: 65, 68
insn=17, live_throughout: 7, dead_or_set: 67, 68
insn=18, live_throughout: 7, dead_or_set: 66, 67
insn=19, live_throughout: 7, dead_or_set: 59, 66
insn=20, live_throughout: 7, 59, dead_or_set: 
insn=21, live_throughout: 7, 59, dead_or_set: 69
insn=22, live_throughout: 7, 59, 69, dead_or_set: 
insn=23, live_throughout: 7, 59, 69, dead_or_set: 
insn=24, live_throughout: 7, 59, dead_or_set: 60, 69
insn=81, live_throughout: 7, 59, 60, dead_or_set: 
insn=27, live_throughout: 7, 59, 69, dead_or_set: 
insn=28, live_throughout: 7, 59, 69, dead_or_set: 71
insn=29, live_throughout: 7, 59, 71, dead_or_set: 69, 72
insn=30, live_throughout: 7, 59, dead_or_set: 71, 72
insn=31, live_throughout: 7, 59, dead_or_set: 70, 71
insn=32, live_throughout: 7, 59, dead_or_set: 60, 70
insn=33, live_throughout: 7, 59, 60, dead_or_set: 
insn=34, live_throughout: 7, 59, 60, dead_or_set: 73
insn=35, live_throughout: 7, 59, dead_or_set: 60, 61, 73
insn=36, live_throughout: 7, dead_or_set: 59, 61, 74
insn=37, live_throughout: 7, dead_or_set: 74
insn=38, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 
insn=41, live_throughout: 7, dead_or_set: 62
insn=42, live_throughout: 7, dead_or_set: 62
insn=43, live_throughout: 7, dead_or_set: 
insn=45, live_throughout: 7, dead_or_set: 63
insn=46, live_throughout: 7, 63, dead_or_set: 75
insn=47, live_throughout: 7, 63, 75, dead_or_set: 76
insn=48, live_throughout: 7, 63, 76, dead_or_set: 1, 75
insn=49, live_throughout: 1, 7, 63, dead_or_set: 4, 76
insn=50, live_throughout: 1, 4, 7, dead_or_set: 5, 63
insn=51, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=52, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=53, live_throughout: 7, dead_or_set: 
insn=55, live_throughout: 7, dead_or_set: 58
insn=83, live_throughout: 7, 58, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 
insn=60, live_throughout: 7, dead_or_set: 58
insn=61, live_throughout: 7, 58, dead_or_set: 
insn=63, live_throughout: 7, dead_or_set: 58, 64
insn=67, live_throughout: 7, dead_or_set: 21, 64
insn=70, live_throughout: 7, 21, dead_or_set: 
changing reg in insn 60
changing reg in insn 55
changing reg in insn 63
changing reg in insn 19
changing reg in insn 11
changing reg in insn 36
changing reg in insn 32
changing reg in insn 24
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 50
changing reg in insn 63
changing reg in insn 67
changing reg in insn 8
changing reg in insn 16
changing reg in insn 15
changing reg in insn 11
changing reg in insn 9
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 17
changing reg in insn 15
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 29
changing reg in insn 28
changing reg in insn 24
changing reg in insn 22
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 30
changing reg in insn 28
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 46
changing reg in insn 48
changing reg in insn 47
changing reg in insn 49
Spilling for insn 15.
Spilling for insn 28.
Spilling for insn 63.
Spilling for insn 15.
Spilling for insn 28.
Spilling for insn 63.

Reloads for insn # 15
Reload 0: reload_in (DI) = (reg:DI 0 ax [65])
	reload_out (DI) = (reg:DI 1 dx [67])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 0 ax [65])
	reload_out_reg: (reg:DI 1 dx [67])
	reload_reg_rtx: (reg:DI 1 dx [67])

Reloads for insn # 28
Reload 0: reload_in (DI) = (reg:DI 0 ax [69])
	reload_out (DI) = (reg:DI 1 dx [71])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 0 ax [69])
	reload_out_reg: (reg:DI 1 dx [71])
	reload_reg_rtx: (reg:DI 1 dx [71])

Reloads for insn # 63
Reload 0: reload_in (DF) = (reg:DF 0 ax [orig:58 D.49958 ] [58])
	SSE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:DF 0 ax [orig:58 D.49958 ] [58])
	reload_reg_rtx: (reg:DF 21 xmm0 [orig:64 <retval> ] [64])
deleting insn with uid = 48.
deleting insn with uid = 63.
deleting insn with uid = 67.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 52.


get_input

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2]
;;  ref usage 	r0={11d,14u} r1={9d,7u} r2={3d,1u} r4={3d,2u} r5={3d,2u} r6={1d,25u} r7={1d,14u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={11d,4u} r18={1d} r19={1d} r20={1d,1u} r21={7d,6u} r22={6d,4u} r23={3d,1u} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 182{101d,81u,0e} in 47{46 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65

;; Pred edge  ENTRY (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 node.h:60 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 t+0 S4 A32])
        (reg:SI 5 di [ t ])) 47 {*movsi_1} (nil))

(insn 3 2 4 2 node.h:60 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 input+0 S4 A32])
        (reg:SI 4 si [ input ])) 47 {*movsi_1} (nil))

(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 8 2 node.h:61 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 success+0 S4 A32])
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 8 7 9 2 node.h:62 (set (reg:DI 0 ax [65])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 input+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 9 8 10 2 node.h:62 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [65])
            (const_int 0 [0x0]))) 3 {*cmpdi_ccno_1} (nil))

(jump_insn 10 9 72 2 node.h:62 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 14)
            (pc))) 616 {*jcc_1} (nil)
 -> 14)
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65


;; Succ edge  4
;; Succ edge  3 (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65
;; lr  def 	 59

;; Pred edge  2 (fallthru)
(note 72 10 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 72 79 3 node.h:62 (set (reg:DF 21 xmm0 [orig:59 D.49949 ] [59])
        (float:DF (reg:DI 0 ax [65]))) 220 {*floatdidf2_sse_interunit} (nil))

(jump_insn 79 11 80 3 (set (pc)
        (label_ref 20)) 631 {jump} (nil)
 -> 20)
;; End of basic block 3 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  5 [100.0%] 

(barrier 80 79 14)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 65
;; lr  def 	 17 [flags] 59 66 67 68

;; Pred edge  2
(code_label 14 80 73 4 10 "" [1 uses])

(note 73 14 86 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 86 73 15 4 node.h:62 (set (reg:DI 1 dx [67])
        (reg:DI 0 ax [65])) 89 {*movdi_1_rex64} (nil))

(insn 15 86 16 4 node.h:62 (parallel [
            (set (reg:DI 1 dx [67])
                (lshiftrt:DI (reg:DI 1 dx [67])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 545 {*lshrdi3_1_one_bit_rex64} (nil))

(insn 16 15 17 4 node.h:62 (parallel [
            (set (reg:DI 0 ax [68])
                (and:DI (reg:DI 0 ax [65])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 375 {*anddi_1} (nil))

(insn 17 16 18 4 node.h:62 (parallel [
            (set (reg:DI 1 dx [67])
                (ior:DI (reg:DI 1 dx [67])
                    (reg:DI 0 ax [68])))
            (clobber (reg:CC 17 flags))
        ]) 397 {*iordi_1} (nil))

(insn 18 17 19 4 node.h:62 (set (reg:DF 21 xmm0 [66])
        (float:DF (reg:DI 1 dx [67]))) 220 {*floatdidf2_sse_interunit} (nil))

(insn 19 18 20 4 node.h:62 (set (reg:DF 21 xmm0 [orig:59 D.49949 ] [59])
        (plus:DF (reg:DF 21 xmm0 [66])
            (reg:DF 21 xmm0 [66]))) 713 {*fop_df_comm_sse} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  5 (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 69

;; Pred edge  4 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 20 19 74 5 11 "" [1 uses])

(note 74 20 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 21 74 22 5 node.h:62 (set (reg:DI 0 ax [69])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 t+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 22 21 23 5 node.h:62 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [69])
            (const_int 0 [0x0]))) 3 {*cmpdi_ccno_1} (nil))

(jump_insn 23 22 75 5 node.h:62 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 616 {*jcc_1} (nil)
 -> 27)
;; End of basic block 5 -> ( 7 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 69


;; Succ edge  7
;; Succ edge  6 (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 69
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  def 	 60

;; Pred edge  5 (fallthru)
(note 75 23 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 24 75 81 6 node.h:62 (set (reg:DF 22 xmm1 [orig:60 D.49950 ] [60])
        (float:DF (reg:DI 0 ax [69]))) 220 {*floatdidf2_sse_interunit} (nil))

(jump_insn 81 24 82 6 (set (pc)
        (label_ref 33)) 631 {jump} (nil)
 -> 33)
;; End of basic block 6 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60


;; Succ edge  8 [100.0%] 

(barrier 82 81 27)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 69
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69
;; lr  def 	 17 [flags] 60 70 71 72

;; Pred edge  5
(code_label 27 82 76 7 12 "" [1 uses])

(note 76 27 87 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 87 76 28 7 node.h:62 (set (reg:DI 1 dx [71])
        (reg:DI 0 ax [69])) 89 {*movdi_1_rex64} (nil))

(insn 28 87 29 7 node.h:62 (parallel [
            (set (reg:DI 1 dx [71])
                (lshiftrt:DI (reg:DI 1 dx [71])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 545 {*lshrdi3_1_one_bit_rex64} (nil))

(insn 29 28 30 7 node.h:62 (parallel [
            (set (reg:DI 0 ax [72])
                (and:DI (reg:DI 0 ax [69])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 375 {*anddi_1} (nil))

(insn 30 29 31 7 node.h:62 (parallel [
            (set (reg:DI 1 dx [71])
                (ior:DI (reg:DI 1 dx [71])
                    (reg:DI 0 ax [72])))
            (clobber (reg:CC 17 flags))
        ]) 397 {*iordi_1} (nil))

(insn 31 30 32 7 node.h:62 (set (reg:DF 22 xmm1 [70])
        (float:DF (reg:DI 1 dx [71]))) 220 {*floatdidf2_sse_interunit} (nil))

(insn 32 31 33 7 node.h:62 (set (reg:DF 22 xmm1 [orig:60 D.49950 ] [60])
        (plus:DF (reg:DF 22 xmm1 [70])
            (reg:DF 22 xmm1 [70]))) 713 {*fop_df_comm_sse} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60


;; Succ edge  8 (fallthru)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60
;; lr  def 	 17 [flags] 61 73 74

;; Pred edge  7 (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 33 32 77 8 13 "" [1 uses])

(note 77 33 34 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 34 77 35 8 node.h:62 (set (reg:DF 23 xmm2 [73])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))

(insn 35 34 36 8 node.h:62 (set (reg:DF 22 xmm1 [orig:61 D.49951 ] [61])
        (plus:DF (reg:DF 22 xmm1 [orig:60 D.49950 ] [60])
            (reg:DF 23 xmm2 [73]))) 713 {*fop_df_comm_sse} (nil))

(insn 36 35 37 8 node.h:62 (set (reg:DF 21 xmm0 [74])
        (div:DF (reg:DF 21 xmm0 [orig:59 D.49949 ] [59])
            (reg:DF 22 xmm1 [orig:61 D.49951 ] [61]))) 724 {*fop_df_1_sse} (nil))

(insn 37 36 38 8 node.h:62 (set (mem/c/i:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 retrieved_input+0 S8 A64])
        (reg:DF 21 xmm0 [74])) 104 {*movdf_integer_rex64} (nil))

(insn 38 37 39 8 node.h:63 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 success+0 S4 A32])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 39 38 40 8 node.h:63 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 58)
            (pc))) 616 {*jcc_1} (nil)
 -> 58)
;; End of basic block 8 -> ( 9 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)
;; Succ edge  12

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62

;; Pred edge  8 (fallthru)
(note 40 39 41 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 42 9 node.h:65 (set (reg:SI 0 ax [orig:62 debug.65 ] [62])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 42 41 43 9 node.h:65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:62 debug.65 ] [62])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 43 42 44 9 node.h:65 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 53)
            (pc))) 616 {*jcc_1} (nil)
 -> 53)
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  11

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 75 76

;; Pred edge  9 (fallthru)
(note 44 43 45 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 10 node.h:65 (set (reg/f:DI 0 ax [orig:63 D.49957 ] [63])
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <string_cst 0x7f2f6b9dc7d0>)) 89 {*movdi_1_rex64} (nil))

(insn 46 45 47 10 node.h:65 (set (reg:SI 1 dx [75])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 input+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 47 46 49 10 node.h:65 (set (reg:SI 2 cx [76])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 t+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 49 47 50 10 node.h:65 (set (reg:SI 4 si)
        (reg:SI 2 cx [76])) 47 {*movsi_1} (nil))

(insn 50 49 51 10 node.h:65 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:63 D.49957 ] [63])) 89 {*movdi_1_rex64} (nil))

(insn 51 50 52 10 node.h:65 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 52 51 53 10 node.h:65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                    (nil))))))
;; End of basic block 10 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 (fallthru)

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 58

;; Pred edge  9
;; Pred edge  10 (fallthru)
(code_label 53 52 54 11 15 "" [1 uses])

(note 54 53 55 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 83 11 node.h:68 (set (reg:DF 0 ax [orig:58 D.49958 ] [58])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (expr_list:REG_EQUAL (const_double:DF 0.0 [0x0.0p+0])
        (nil)))

(jump_insn 83 55 84 11 node.h:68 (set (pc)
        (label_ref 61)) 631 {jump} (nil)
 -> 61)
;; End of basic block 11 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58


;; Succ edge  13 [100.0%] 

(barrier 84 83 58)

;; Start of basic block ( 8) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 58

;; Pred edge  8
(code_label 58 84 59 12 14 "" [1 uses])

(note 59 58 60 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 12 node.h:70 (set (reg:DF 0 ax [orig:58 D.49958 ] [58])
        (mem/c/i:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 retrieved_input+0 S8 A64])) 104 {*movdf_integer_rex64} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58


;; Succ edge  13 (fallthru)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
;; lr  def 	 21 [xmm0] 64

;; Pred edge  12 (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 61 60 62 13 16 "" [1 uses])

(note 62 61 88 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 88 62 89 13 node.h:70 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 S8 A64])
        (reg:DF 0 ax [orig:58 D.49958 ] [58])) 104 {*movdf_integer_rex64} (nil))

(insn 89 88 70 13 node.h:70 (set (reg:DF 21 xmm0 [orig:64 <retval> ] [64])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 70 89 85 13 node.h:71 (use (reg/i:DF 21 xmm0)) -1 (nil))
;; End of basic block 13 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 85 70 0 NOTE_INSN_DELETED)


;; Function update_input (update_input)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r75: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a6 (r75,l0) best DIREG, cover GENERAL_REGS
    r74: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a7 (r74,l0) best SIREG, cover GENERAL_REGS
    r73: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a5 (r73,l0) best SSE_FIRST_REG, cover SSE_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a1(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a3(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a5(r73,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 FP_TOP_REG:4,4 FP_SECOND_REG:4,4 FLOAT_REGS:4,4 MEM:12
  a6(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a7(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a8(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a9(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a10(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a11(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a12(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a13(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a14(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a15(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a16(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a17(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 47(l0): point = 1
   Insn 46(l0): point = 3
   Insn 44(l0): point = 5
   Insn 43(l0): point = 7
   Insn 40(l0): point = 10
   Insn 38(l0): point = 13
   Insn 37(l0): point = 15
   Insn 35(l0): point = 17
   Insn 34(l0): point = 19
   Insn 31(l0): point = 22
   Insn 30(l0): point = 24
   Insn 29(l0): point = 26
   Insn 28(l0): point = 28
   Insn 27(l0): point = 30
   Insn 26(l0): point = 32
   Insn 25(l0): point = 34
   Insn 24(l0): point = 36
   Insn 23(l0): point = 38
   Insn 22(l0): point = 40
   Insn 21(l0): point = 42
   Insn 20(l0): point = 44
   Insn 19(l0): point = 46
   Insn 18(l0): point = 48
   Insn 17(l0): point = 50
   Insn 16(l0): point = 52
   Insn 15(l0): point = 54
   Insn 14(l0): point = 56
   Insn 13(l0): point = 58
   Insn 53(l0): point = 61
   Insn 9(l0): point = 63
   Insn 51(l0): point = 66
   Insn 5(l0): point = 68
 a0(r59): [4..5]
 a1(r58): [6..7]
 a2(r61): [16..17]
 a3(r60): [18..19]
 a4(r72): [25..38]
 a5(r73): [25..26]
 a6(r75): [31..34]
 a7(r74): [33..36]
 a8(r71): [39..40]
 a9(r66): [39..50]
 a10(r70): [41..42]
 a11(r69): [43..44]
 a12(r68): [45..46]
 a13(r67): [47..48]
 a14(r65): [51..52]
 a15(r64): [53..54]
 a16(r62): [53..58]
 a17(r63): [55..56]
Compressing live ranges: from 71 to 33 - 46%
Ranges after the compression:
 a0(r59): [0..1]
 a1(r58): [2..3]
 a2(r61): [4..5]
 a3(r60): [6..7]
 a4(r72): [8..14]
 a5(r73): [8..9]
 a6(r75): [10..12]
 a7(r74): [11..13]
 a8(r71): [15..16]
 a9(r66): [15..25]
 a10(r70): [17..18]
 a11(r69): [19..20]
 a12(r68): [21..22]
 a13(r67): [23..24]
 a14(r65): [26..27]
 a15(r64): [28..29]
 a16(r62): [28..32]
 a17(r63): [30..31]
  regions=3, blocks=9, points=33
    allocnos=18, copies=0, conflicts=0, ranges=18
Disposition:
    1:r58  l0     0    0:r59  l0     0    3:r60  l0     0    2:r61  l0     0
   16:r62  l0     0   17:r63  l0     1   15:r64  l0     1   14:r65  l0     0
    9:r66  l0     1   13:r67  l0     0   12:r68  l0     0   11:r69  l0     0
   10:r70  l0     0    8:r71  l0     0    4:r72  l0     3    5:r73  l0    21
    7:r74  l0     1    6:r75  l0     0
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=51, live_throughout: 7, dead_or_set: 
insn=45, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 
insn=53, live_throughout: 7, dead_or_set: 
insn=36, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 62
insn=14, live_throughout: 7, 62, dead_or_set: 63
insn=15, live_throughout: 7, 62, dead_or_set: 63, 64
insn=16, live_throughout: 7, dead_or_set: 62, 64, 65
insn=17, live_throughout: 7, dead_or_set: 65, 66
insn=18, live_throughout: 7, 66, dead_or_set: 67
insn=19, live_throughout: 7, 66, dead_or_set: 67, 68
insn=20, live_throughout: 7, 66, dead_or_set: 68, 69
insn=21, live_throughout: 7, 66, dead_or_set: 69, 70
insn=22, live_throughout: 7, 66, dead_or_set: 70, 71
insn=23, live_throughout: 7, dead_or_set: 66, 71, 72
insn=24, live_throughout: 7, 72, dead_or_set: 74
insn=25, live_throughout: 7, 72, 74, dead_or_set: 75
insn=26, live_throughout: 7, 72, 75, dead_or_set: 4, 74
insn=27, live_throughout: 4, 7, 72, dead_or_set: 5, 75
insn=28, live_throughout: 7, 72, dead_or_set: 4, 5, 21
insn=29, live_throughout: 7, 72, dead_or_set: 21, 73
insn=30, live_throughout: 7, dead_or_set: 72, 73
insn=31, live_throughout: 7, dead_or_set: 
insn=32, live_throughout: 7, dead_or_set: 
insn=34, live_throughout: 7, dead_or_set: 60
insn=35, live_throughout: 7, dead_or_set: 60, 61
insn=37, live_throughout: 7, dead_or_set: 61
insn=38, live_throughout: 7, dead_or_set: 
insn=40, live_throughout: 7, dead_or_set: 
insn=41, live_throughout: 7, dead_or_set: 
insn=43, live_throughout: 7, dead_or_set: 58
insn=44, live_throughout: 7, dead_or_set: 58, 59
insn=46, live_throughout: 7, dead_or_set: 59
insn=47, live_throughout: 7, dead_or_set: 
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 13
changing reg in insn 16
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 23
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 30
changing reg in insn 29
changing reg in insn 30
changing reg in insn 24
changing reg in insn 26
changing reg in insn 25
changing reg in insn 27
deleting insn with uid = 29.
deleting insn with uid = 35.
deleting insn with uid = 44.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.


update_input

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0]
;;  ref usage 	r0={12d,10u} r1={6d,4u} r2={2d} r3={1d,1u} r4={3d,1u} r5={3d,1u} r6={1d,20u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={11d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d,1u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 139{89d,50u,0e} in 29{28 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 51 2 node.h:76 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 51 5 52 2 node.h:76 (set (pc)
        (label_ref 41)) 631 {jump} (nil)
 -> 41)
;; End of basic block 2 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 [100.0%] 

(barrier 52 51 45)

;; Start of basic block ( 7) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  7
(code_label 45 52 8 3 21 "" [1 uses])

(note 8 45 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 53 3 node.h:78 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 53 9 54 3 node.h:78 (set (pc)
        (label_ref 32)) 631 {jump} (nil)
 -> 32)
;; End of basic block 3 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 [100.0%] 

(barrier 54 53 36)

;; Start of basic block ( 5) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 64 65 66 67 68 69 70 71 72 73 74 75

;; Pred edge  5
(code_label 36 54 12 4 20 "" [1 uses])

(note 12 36 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 4 node.h:80 (set (reg/f:DI 0 ax [orig:62 network.59 ] [62])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 14 13 15 4 node.h:80 (set (reg:DI 1 dx [orig:63 D.49934 ] [63])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 15 14 16 4 node.h:80 (parallel [
            (set (reg:DI 1 dx [orig:64 D.49935 ] [64])
                (ashift:DI (reg:DI 1 dx [orig:63 D.49934 ] [63])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 16 15 17 4 node.h:80 (parallel [
            (set (reg/f:DI 0 ax [orig:65 D.49936 ] [65])
                (plus:DI (reg/f:DI 0 ax [orig:62 network.59 ] [62])
                    (reg:DI 1 dx [orig:64 D.49935 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 17 16 18 4 node.h:80 (set (reg/f:DI 1 dx [orig:66 D.49937 ] [66])
        (mem/f:DI (reg/f:DI 0 ax [orig:65 D.49936 ] [65]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 18 17 19 4 node.h:80 (set (reg:SI 0 ax [orig:67 network_size.60 ] [67])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 19 18 20 4 node.h:80 (parallel [
            (set (reg:SI 0 ax [orig:68 D.49939 ] [68])
                (plus:SI (reg:SI 0 ax [orig:67 network_size.60 ] [67])
                    (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))

(insn 20 19 21 4 node.h:80 (parallel [
            (set (reg:SI 0 ax [orig:69 D.49940 ] [69])
                (plus:SI (reg:SI 0 ax [orig:68 D.49939 ] [68])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))

(insn 21 20 22 4 node.h:80 (set (reg:DI 0 ax [orig:70 D.49941 ] [70])
        (zero_extend:DI (reg:SI 0 ax [orig:69 D.49940 ] [69]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 22 21 23 4 node.h:80 (parallel [
            (set (reg:DI 0 ax [orig:71 D.49942 ] [71])
                (ashift:DI (reg:DI 0 ax [orig:70 D.49941 ] [70])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 23 22 24 4 node.h:80 (parallel [
            (set (reg/f:DI 3 bx [orig:72 D.49943 ] [72])
                (plus:DI (reg/f:DI 1 dx [orig:66 D.49937 ] [66])
                    (reg:DI 0 ax [orig:71 D.49942 ] [71])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 24 23 25 4 node.h:80 (set (reg:SI 1 dx [74])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 25 24 26 4 node.h:80 (set (reg:SI 0 ax [75])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 26 25 27 4 node.h:80 (set (reg:SI 4 si)
        (reg:SI 1 dx [74])) 47 {*movsi_1} (nil))

(insn 27 26 28 4 node.h:80 (set (reg:SI 5 di)
        (reg:SI 0 ax [75])) 47 {*movsi_1} (nil))

(call_insn 28 27 30 4 node.h:80 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("get_input") [flags 0x3]  <function_decl 0x7f2f6c26e800 get_input>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
            (nil))))

(insn 30 28 31 4 node.h:80 (set (mem:DF (reg/f:DI 3 bx [orig:72 D.49943 ] [72]) [0 S8 A64])
        (reg:DF 21 xmm0 [orig:73 D.49944 ] [73])) 104 {*movdf_integer_rex64} (nil))

(insn 31 30 32 4 node.h:78 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61

;; Pred edge  4 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 32 31 33 5 19 "" [1 uses])

(note 33 32 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 34 33 37 5 node.h:78 (set (reg:SI 0 ax [orig:60 input_list_size.61 ] [60])
        (mem/c/i:SI (symbol_ref:DI ("input_list_size")  <var_decl 0x7f2f6c4b8d20 input_list_size>) [0 input_list_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 37 34 38 5 node.h:78 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:61 input_list_size.62 ] [61])
            (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 38 37 39 5 node.h:78 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 616 {*jcc_1} (nil)
 -> 36)
;; End of basic block 5 -> ( 4 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4
;; Succ edge  6 (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  5 (fallthru)
(note 39 38 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 40 39 41 6 node.h:76 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 58 59

;; Pred edge  6 (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 41 40 42 7 18 "" [1 uses])

(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 46 7 node.h:76 (set (reg:SI 0 ax [orig:58 historylength.63 ] [58])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 46 43 47 7 node.h:76 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:59 historylength.64 ] [59])
            (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 47 46 50 7 node.h:76 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 616 {*jcc_1} (nil)
 -> 45)
;; End of basic block 7 -> ( 3 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3
;; Succ edge  8 (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  7 (fallthru)
(note 50 47 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 55 50 0 NOTE_INSN_DELETED)


;; Function network_init (network_init)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 28 n_edges 38 count 28 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r123: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r123,l0) best GENERAL_REGS, cover GENERAL_REGS
    r122: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a38 (r122,l0) best AREG, cover GENERAL_REGS
    r121: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a47 (r121,l0) best AREG, cover GENERAL_REGS
    r120: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r120,l0) best DIREG, cover GENERAL_REGS
    r119: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a1 (r119,l0) best SIREG, cover GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r118,l0) best GENERAL_REGS, cover GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, cover GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r116,l0) best GENERAL_REGS, cover GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r115,l0) best GENERAL_REGS, cover GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r114,l0) best GENERAL_REGS, cover GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r111,l0) best GENERAL_REGS, cover GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a14 (r106,l0) best DIREG, cover GENERAL_REGS
    r105: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a15 (r105,l0) best SIREG, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred DREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a16 (r99,l0) best DREG, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a39 (r86,l0) best DIREG, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a45 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a48 (r75,l0) best DIREG, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a51 (r72,l0) best DIREG, cover GENERAL_REGS
    r71: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a52 (r71,l0) best SIREG, cover GENERAL_REGS
    r70: preferred DREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a53 (r70,l0) best DREG, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a54 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a55 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a56 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a57 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a58 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a59 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a60 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a61 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a62 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a63 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a64 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a65 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a2(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r116,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a5(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a7(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a8(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a9(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a10(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a11(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a12(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a13(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a14(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a15(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a16(r99,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a17(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a18(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a19(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a20(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a21(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a22(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a23(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a24(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a25(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a26(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a27(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a28(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a29(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a30(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a31(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a32(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a33(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a34(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a35(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a36(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a37(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a38(r122,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a39(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a40(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a41(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a42(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a43(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a44(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a45(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a46(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a47(r121,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a48(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a49(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a50(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a51(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a52(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a53(r70,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a54(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a55(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a56(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a57(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a58(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a59(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a60(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a61(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a62(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a63(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a64(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a65(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 203(l0): point = 1
   Insn 199(l0): point = 4
   Insn 198(l0): point = 6
   Insn 194(l0): point = 9
   Insn 193(l0): point = 11
   Insn 189(l0): point = 14
   Insn 188(l0): point = 16
   Insn 184(l0): point = 19
   Insn 175(l0): point = 21
   Insn 174(l0): point = 23
   Insn 171(l0): point = 26
   Insn 170(l0): point = 28
   Insn 169(l0): point = 30
   Insn 168(l0): point = 32
   Insn 167(l0): point = 34
   Insn 166(l0): point = 36
   Insn 165(l0): point = 38
   Insn 164(l0): point = 40
   Insn 163(l0): point = 42
   Insn 162(l0): point = 44
   Insn 161(l0): point = 46
   Insn 159(l0): point = 49
   Insn 158(l0): point = 51
   Insn 157(l0): point = 53
   Insn 156(l0): point = 55
   Insn 155(l0): point = 57
   Insn 154(l0): point = 59
   Insn 153(l0): point = 61
   Insn 150(l0): point = 64
   Insn 149(l0): point = 66
   Insn 147(l0): point = 69
   Insn 146(l0): point = 71
   Insn 145(l0): point = 73
   Insn 144(l0): point = 75
   Insn 143(l0): point = 77
   Insn 140(l0): point = 80
   Insn 139(l0): point = 82
   Insn 137(l0): point = 85
   Insn 136(l0): point = 87
   Insn 135(l0): point = 89
   Insn 132(l0): point = 92
   Insn 131(l0): point = 94
   Insn 130(l0): point = 96
   Insn 129(l0): point = 98
   Insn 128(l0): point = 100
   Insn 127(l0): point = 102
   Insn 126(l0): point = 104
   Insn 125(l0): point = 106
   Insn 124(l0): point = 108
   Insn 123(l0): point = 110
   Insn 122(l0): point = 112
   Insn 121(l0): point = 114
   Insn 120(l0): point = 116
   Insn 118(l0): point = 119
   Insn 117(l0): point = 121
   Insn 116(l0): point = 123
   Insn 114(l0): point = 126
   Insn 113(l0): point = 128
   Insn 111(l0): point = 130
   Insn 110(l0): point = 132
   Insn 107(l0): point = 135
   Insn 105(l0): point = 138
   Insn 104(l0): point = 140
   Insn 102(l0): point = 142
   Insn 99(l0): point = 145
   Insn 98(l0): point = 147
   Insn 97(l0): point = 149
   Insn 96(l0): point = 151
   Insn 95(l0): point = 153
   Insn 94(l0): point = 155
   Insn 93(l0): point = 157
   Insn 92(l0): point = 159
   Insn 91(l0): point = 161
   Insn 90(l0): point = 163
   Insn 89(l0): point = 165
   Insn 182(l0): point = 168
   Insn 85(l0): point = 170
   Insn 84(l0): point = 172
   Insn 83(l0): point = 174
   Insn 82(l0): point = 176
   Insn 81(l0): point = 178
   Insn 80(l0): point = 180
   Insn 79(l0): point = 182
   Insn 78(l0): point = 184
   Insn 77(l0): point = 186
   Insn 76(l0): point = 188
   Insn 75(l0): point = 190
   Insn 74(l0): point = 192
   Insn 73(l0): point = 194
   Insn 72(l0): point = 196
   Insn 180(l0): point = 199
   Insn 68(l0): point = 201
   Insn 67(l0): point = 203
   Insn 66(l0): point = 205
   Insn 65(l0): point = 207
   Insn 64(l0): point = 209
   Insn 63(l0): point = 211
   Insn 62(l0): point = 213
   Insn 61(l0): point = 215
   Insn 60(l0): point = 217
   Insn 59(l0): point = 219
   Insn 56(l0): point = 222
   Insn 55(l0): point = 224
   Insn 54(l0): point = 226
   Insn 53(l0): point = 228
   Insn 52(l0): point = 230
   Insn 51(l0): point = 232
   Insn 50(l0): point = 234
   Insn 49(l0): point = 236
   Insn 47(l0): point = 239
   Insn 46(l0): point = 241
   Insn 45(l0): point = 243
   Insn 44(l0): point = 245
   Insn 43(l0): point = 247
   Insn 42(l0): point = 249
   Insn 41(l0): point = 251
   Insn 35(l0): point = 254
   Insn 34(l0): point = 256
   Insn 33(l0): point = 258
   Insn 27(l0): point = 261
   Insn 26(l0): point = 263
   Insn 25(l0): point = 265
   Insn 24(l0): point = 267
   Insn 23(l0): point = 269
   Insn 17(l0): point = 272
   Insn 16(l0): point = 274
   Insn 15(l0): point = 276
   Insn 14(l0): point = 278
   Insn 13(l0): point = 280
   Insn 7(l0): point = 283
   Insn 6(l0): point = 285
   Insn 5(l0): point = 287
 a0(r120): [31..34]
 a1(r119): [33..36]
 a2(r118): [37..38]
 a3(r117): [37..40]
 a4(r116): [41..42]
 a5(r115): [43..44]
 a6(r114): [43..46]
 a7(r113): [52..53]
 a8(r112): [52..55]
 a9(r111): [56..57]
 a10(r110): [58..59]
 a11(r109): [58..61]
 a12(r108): [72..73]
 a13(r107): [88..89]
 a14(r106): [97..102]
 a15(r105): [99..104]
 a16(r99): [101..116]
 a17(r104): [105..106]
 a18(r103): [107..108]
 a19(r101): [107..112]
 a20(r102): [109..110]
 a21(r100): [113..114]
 a22(r98): [122..123]
 a23(r79): [129..130]
 a24(r78): [131..132]
 a25(r89): [141..142]
 a26(r97): [148..151]
 a27(r123): [148..149]
 a28(r96): [152..153]
 a29(r94): [152..157]
 a30(r95): [154..155]
 a31(r93): [158..159]
 a32(r92): [160..161]
 a33(r90): [160..165]
 a34(r91): [162..163]
 a35(r83): [173..190]
 a36(r88): [173..174]
 a37(r87): [175..176]
 a38(r122): [177..178]
 a39(r86): [183..184]
 a40(r85): [185..186]
 a41(r84): [187..188]
 a42(r82): [191..192]
 a43(r80): [191..196]
 a44(r81): [193..194]
 a45(r77): [204..205]
 a46(r76): [206..207]
 a47(r121): [208..209]
 a48(r75): [214..215]
 a49(r74): [216..217]
 a50(r73): [218..219]
 a51(r72): [227..232]
 a52(r71): [229..234]
 a53(r70): [231..236]
 a54(r69): [242..243]
 a55(r68): [246..247]
 a56(r67): [248..249]
 a57(r66): [250..251]
 a58(r65): [257..258]
 a59(r64): [264..265]
 a60(r63): [264..267]
 a61(r62): [268..269]
 a62(r61): [275..276]
 a63(r60): [275..278]
 a64(r59): [279..280]
 a65(r58): [286..287]
Compressing live ranges: from 290 to 120 - 41%
Ranges after the compression:
 a0(r120): [0..2]
 a1(r119): [1..3]
 a2(r118): [4..5]
 a3(r117): [4..6]
 a4(r116): [7..8]
 a5(r115): [9..10]
 a6(r114): [9..11]
 a7(r113): [12..13]
 a8(r112): [12..14]
 a9(r111): [15..16]
 a10(r110): [17..18]
 a11(r109): [17..19]
 a12(r108): [20..21]
 a13(r107): [22..23]
 a14(r106): [24..27]
 a15(r105): [25..28]
 a16(r99): [26..38]
 a17(r104): [29..30]
 a18(r103): [31..32]
 a19(r101): [31..35]
 a20(r102): [33..34]
 a21(r100): [36..37]
 a22(r98): [39..40]
 a23(r79): [41..42]
 a24(r78): [43..44]
 a25(r89): [45..46]
 a26(r97): [47..49]
 a27(r123): [47..48]
 a28(r96): [50..51]
 a29(r94): [50..54]
 a30(r95): [52..53]
 a31(r93): [55..56]
 a32(r92): [57..58]
 a33(r90): [57..61]
 a34(r91): [59..60]
 a35(r83): [62..74]
 a36(r88): [62..63]
 a37(r87): [64..65]
 a38(r122): [66..67]
 a39(r86): [68..69]
 a40(r85): [70..71]
 a41(r84): [72..73]
 a42(r82): [75..76]
 a43(r80): [75..79]
 a44(r81): [77..78]
 a45(r77): [80..81]
 a46(r76): [82..83]
 a47(r121): [84..85]
 a48(r75): [86..87]
 a49(r74): [88..89]
 a50(r73): [90..91]
 a51(r72): [92..95]
 a52(r71): [93..96]
 a53(r70): [94..97]
 a54(r69): [98..99]
 a55(r68): [100..101]
 a56(r67): [102..103]
 a57(r66): [104..105]
 a58(r65): [106..107]
 a59(r64): [108..109]
 a60(r63): [108..110]
 a61(r62): [111..112]
 a62(r61): [113..114]
 a63(r60): [113..115]
 a64(r59): [116..117]
 a65(r58): [118..119]
  regions=3, blocks=28, points=120
    allocnos=66, copies=0, conflicts=0, ranges=66
Disposition:
   65:r58  l0     0   64:r59  l0     0   63:r60  l0     1   62:r61  l0     0
   61:r62  l0     0   60:r63  l0     1   59:r64  l0     0   58:r65  l0     0
   57:r66  l0     0   56:r67  l0     0   55:r68  l0     0   54:r69  l0     0
   53:r70  l0     1   52:r71  l0     2   51:r72  l0     0   50:r73  l0     0
   49:r74  l0     0   48:r75  l0     0   46:r76  l0     0   45:r77  l0     0
   24:r78  l0     0   23:r79  l0     0   43:r80  l0     0   44:r81  l0     1
   42:r82  l0     1   35:r83  l0     3   41:r84  l0     0   40:r85  l0     0
   39:r86  l0     0   37:r87  l0     0   36:r88  l0     0   25:r89  l0     0
   33:r90  l0     0   34:r91  l0     1   32:r92  l0     1   31:r93  l0     0
   29:r94  l0     0   30:r95  l0     1   28:r96  l0     1   26:r97  l0     1
   22:r98  l0     0   16:r99  l0     1   21:r100 l0     0   19:r101 l0     2
   20:r102 l0     0   18:r103 l0     0   17:r104 l0     0   15:r105 l0     2
   14:r106 l0     0   13:r107 l0     0   12:r108 l0     0   11:r109 l0     1
   10:r110 l0     0    9:r111 l0     0    8:r112 l0     1    7:r113 l0     0
    6:r114 l0     1    5:r115 l0     0    4:r116 l0     0    3:r117 l0     1
    2:r118 l0     0    1:r119 l0     1    0:r120 l0     0   47:r121 l0     0
   38:r122 l0     0   27:r123 l0     0
+++Costs: overall -12, reg -12, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 58
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 59
insn=14, live_throughout: 7, dead_or_set: 59, 60
insn=15, live_throughout: 7, 60, dead_or_set: 61
insn=16, live_throughout: 7, dead_or_set: 60, 61
insn=17, live_throughout: 7, dead_or_set: 
insn=21, live_throughout: 7, dead_or_set: 
insn=23, live_throughout: 7, dead_or_set: 62
insn=24, live_throughout: 7, dead_or_set: 62, 63
insn=25, live_throughout: 7, 63, dead_or_set: 64
insn=26, live_throughout: 7, dead_or_set: 63, 64
insn=27, live_throughout: 7, dead_or_set: 
insn=31, live_throughout: 7, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 65
insn=34, live_throughout: 7, dead_or_set: 65
insn=35, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 
insn=41, live_throughout: 7, dead_or_set: 66
insn=42, live_throughout: 7, dead_or_set: 66, 67
insn=43, live_throughout: 7, dead_or_set: 67, 68
insn=44, live_throughout: 7, dead_or_set: 68
insn=45, live_throughout: 7, dead_or_set: 69
insn=46, live_throughout: 7, dead_or_set: 69
insn=47, live_throughout: 7, dead_or_set: 
insn=49, live_throughout: 7, dead_or_set: 70
insn=50, live_throughout: 7, 70, dead_or_set: 71
insn=51, live_throughout: 7, 70, 71, dead_or_set: 72
insn=52, live_throughout: 7, 71, 72, dead_or_set: 1, 70
insn=53, live_throughout: 1, 7, 72, dead_or_set: 4, 71
insn=54, live_throughout: 1, 4, 7, dead_or_set: 5, 72
insn=55, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=56, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=57, live_throughout: 7, dead_or_set: 
insn=59, live_throughout: 7, dead_or_set: 73
insn=60, live_throughout: 7, dead_or_set: 73, 74
insn=61, live_throughout: 7, dead_or_set: 74, 75
insn=62, live_throughout: 7, dead_or_set: 5, 75
insn=63, live_throughout: 7, dead_or_set: 0, 5
insn=64, live_throughout: 7, dead_or_set: 0, 121
insn=65, live_throughout: 7, dead_or_set: 76, 121
insn=66, live_throughout: 7, dead_or_set: 76, 77
insn=67, live_throughout: 7, dead_or_set: 77
insn=68, live_throughout: 7, dead_or_set: 
insn=180, live_throughout: 7, dead_or_set: 
insn=112, live_throughout: 7, dead_or_set: 
insn=72, live_throughout: 7, dead_or_set: 80
insn=73, live_throughout: 7, 80, dead_or_set: 81
insn=74, live_throughout: 7, 80, dead_or_set: 81, 82
insn=75, live_throughout: 7, dead_or_set: 80, 82, 83
insn=76, live_throughout: 7, 83, dead_or_set: 84
insn=77, live_throughout: 7, 83, dead_or_set: 84, 85
insn=78, live_throughout: 7, 83, dead_or_set: 85, 86
insn=79, live_throughout: 7, 83, dead_or_set: 5, 86
insn=80, live_throughout: 7, 83, dead_or_set: 0, 5
insn=81, live_throughout: 7, 83, dead_or_set: 0, 122
insn=82, live_throughout: 7, 83, dead_or_set: 87, 122
insn=83, live_throughout: 7, 83, dead_or_set: 87, 88
insn=84, live_throughout: 7, dead_or_set: 83, 88
insn=85, live_throughout: 7, dead_or_set: 
insn=182, live_throughout: 7, dead_or_set: 
insn=103, live_throughout: 7, dead_or_set: 
insn=89, live_throughout: 7, dead_or_set: 90
insn=90, live_throughout: 7, 90, dead_or_set: 91
insn=91, live_throughout: 7, 90, dead_or_set: 91, 92
insn=92, live_throughout: 7, dead_or_set: 90, 92, 93
insn=93, live_throughout: 7, dead_or_set: 93, 94
insn=94, live_throughout: 7, 94, dead_or_set: 95
insn=95, live_throughout: 7, 94, dead_or_set: 95, 96
insn=96, live_throughout: 7, dead_or_set: 94, 96, 97
insn=97, live_throughout: 7, 97, dead_or_set: 123
insn=98, live_throughout: 7, dead_or_set: 97, 123
insn=99, live_throughout: 7, dead_or_set: 
insn=100, live_throughout: 7, dead_or_set: 
insn=102, live_throughout: 7, dead_or_set: 89
insn=104, live_throughout: 7, dead_or_set: 89
insn=105, live_throughout: 7, dead_or_set: 
insn=107, live_throughout: 7, dead_or_set: 
insn=108, live_throughout: 7, dead_or_set: 
insn=110, live_throughout: 7, dead_or_set: 78
insn=111, live_throughout: 7, dead_or_set: 78, 79
insn=113, live_throughout: 7, dead_or_set: 79
insn=114, live_throughout: 7, dead_or_set: 
insn=116, live_throughout: 7, dead_or_set: 98
insn=117, live_throughout: 7, dead_or_set: 98
insn=118, live_throughout: 7, dead_or_set: 
insn=120, live_throughout: 7, dead_or_set: 99
insn=121, live_throughout: 7, 99, dead_or_set: 100
insn=122, live_throughout: 7, 99, dead_or_set: 100, 101
insn=123, live_throughout: 7, 99, 101, dead_or_set: 102
insn=124, live_throughout: 7, 99, 101, dead_or_set: 102, 103
insn=125, live_throughout: 7, 99, dead_or_set: 101, 103, 104
insn=126, live_throughout: 7, 99, dead_or_set: 104, 105
insn=127, live_throughout: 7, 99, 105, dead_or_set: 106
insn=128, live_throughout: 7, 105, 106, dead_or_set: 1, 99
insn=129, live_throughout: 1, 7, 106, dead_or_set: 4, 105
insn=130, live_throughout: 1, 4, 7, dead_or_set: 5, 106
insn=131, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=132, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=133, live_throughout: 7, dead_or_set: 
insn=135, live_throughout: 7, dead_or_set: 107
insn=136, live_throughout: 7, dead_or_set: 107
insn=137, live_throughout: 7, dead_or_set: 
insn=139, live_throughout: 7, dead_or_set: 5
insn=140, live_throughout: 7, dead_or_set: 0, 5
insn=141, live_throughout: 7, dead_or_set: 
insn=143, live_throughout: 7, dead_or_set: 0
insn=144, live_throughout: 7, dead_or_set: 0
insn=145, live_throughout: 7, dead_or_set: 108
insn=146, live_throughout: 7, dead_or_set: 108
insn=147, live_throughout: 7, dead_or_set: 
insn=149, live_throughout: 7, dead_or_set: 5
insn=150, live_throughout: 7, dead_or_set: 0, 5
insn=151, live_throughout: 7, dead_or_set: 
insn=153, live_throughout: 7, dead_or_set: 109
insn=154, live_throughout: 7, 109, dead_or_set: 110
insn=155, live_throughout: 7, dead_or_set: 109, 110, 111
insn=156, live_throughout: 7, dead_or_set: 111, 112
insn=157, live_throughout: 7, 112, dead_or_set: 113
insn=158, live_throughout: 7, dead_or_set: 112, 113
insn=159, live_throughout: 7, dead_or_set: 
insn=161, live_throughout: 7, dead_or_set: 114
insn=162, live_throughout: 7, 114, dead_or_set: 115
insn=163, live_throughout: 7, dead_or_set: 114, 115, 116
insn=164, live_throughout: 7, dead_or_set: 116, 117
insn=165, live_throughout: 7, 117, dead_or_set: 118
insn=166, live_throughout: 7, dead_or_set: 117, 118, 119
insn=167, live_throughout: 7, 119, dead_or_set: 120
insn=168, live_throughout: 7, 120, dead_or_set: 4, 119
insn=169, live_throughout: 4, 7, dead_or_set: 5, 120
insn=170, live_throughout: 4, 5, 7, dead_or_set: 0
insn=171, live_throughout: 7, dead_or_set: 0, 4, 5
insn=172, live_throughout: 7, dead_or_set: 
insn=174, live_throughout: 7, dead_or_set: 0
insn=175, live_throughout: 7, dead_or_set: 0
insn=184, live_throughout: 7, dead_or_set: 
insn=187, live_throughout: 7, dead_or_set: 
insn=188, live_throughout: 7, dead_or_set: 
insn=189, live_throughout: 7, dead_or_set: 
insn=192, live_throughout: 7, dead_or_set: 
insn=193, live_throughout: 7, dead_or_set: 
insn=194, live_throughout: 7, dead_or_set: 
insn=197, live_throughout: 7, dead_or_set: 
insn=198, live_throughout: 7, dead_or_set: 
insn=199, live_throughout: 7, dead_or_set: 
insn=202, live_throughout: 7, dead_or_set: 
insn=203, live_throughout: 7, dead_or_set: 
insn=178, live_throughout: 7, dead_or_set: 
changing reg in insn 5
changing reg in insn 6
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 16
changing reg in insn 15
changing reg in insn 16
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 53
changing reg in insn 51
changing reg in insn 54
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 113
changing reg in insn 72
changing reg in insn 75
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 84
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 102
changing reg in insn 104
changing reg in insn 89
changing reg in insn 92
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 96
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 116
changing reg in insn 117
changing reg in insn 120
changing reg in insn 128
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 125
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 129
changing reg in insn 127
changing reg in insn 130
changing reg in insn 135
changing reg in insn 136
changing reg in insn 145
changing reg in insn 146
changing reg in insn 153
changing reg in insn 155
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 158
changing reg in insn 157
changing reg in insn 158
changing reg in insn 161
changing reg in insn 163
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 166
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 167
changing reg in insn 169
changing reg in insn 64
changing reg in insn 65
changing reg in insn 81
changing reg in insn 82
changing reg in insn 97
changing reg in insn 98
deleting insn with uid = 52.
deleting insn with uid = 64.
deleting insn with uid = 65.
deleting insn with uid = 66.
deleting insn with uid = 81.
deleting insn with uid = 82.
deleting insn with uid = 83.
deleting insn with uid = 111.
deleting insn with uid = 128.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 132.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 144.
verify found no changes in insn with uid = 150.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 175.


network_init

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={54d,46u} r1={26d,16u} r2={13d,3u} r3={1d,1u} r4={13d,3u} r5={17d,7u} r6={1d,38u} r7={1d,36u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r17={37d,11u} r18={9d} r19={9d} r20={1d,1u} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} 
;;    total ref usage 678{516d,162u,0e} in 123{114 regular + 9 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 58

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 node.h:91 (set (reg:SI 0 ax [orig:58 network_size.26 ] [58])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 6 5 7 2 node.h:91 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:58 network_size.26 ] [58])
            (const_int 1 [0x1]))) 6 {*cmpsi_1} (nil))

(jump_insn 7 6 11 2 node.h:91 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 187)
            (pc))) 616 {*jcc_1} (nil)
 -> 187)
;; End of basic block 2 -> ( 24 3)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  24
;; Succ edge  3 (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61

;; Pred edge  2 (fallthru)
(code_label 11 7 12 3 23 "" [0 uses])

(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 3 node.h:92 (set (reg:SI 0 ax [orig:59 input_list_size.27 ] [59])
        (mem/c/i:SI (symbol_ref:DI ("input_list_size")  <var_decl 0x7f2f6c4b8d20 input_list_size>) [0 input_list_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 14 13 15 3 node.h:92 (set (reg:SI 1 dx [orig:60 input_list_size.28 ] [60])
        (reg:SI 0 ax [orig:59 input_list_size.27 ] [59])) 47 {*movsi_1} (nil))

(insn 15 14 16 3 node.h:92 (set (reg:SI 0 ax [orig:61 network_size.29 ] [61])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 16 15 17 3 node.h:92 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:60 input_list_size.28 ] [60])
            (reg:SI 0 ax [orig:61 network_size.29 ] [61]))) 6 {*cmpsi_1} (nil))

(jump_insn 17 16 21 3 node.h:92 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 192)
            (pc))) 616 {*jcc_1} (nil)
 -> 192)
;; End of basic block 3 -> ( 25 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  25
;; Succ edge  4 (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 63 64

;; Pred edge  3 (fallthru)
(code_label 21 17 22 4 25 "" [0 uses])

(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 4 node.h:93 (set (reg:SI 0 ax [orig:62 output_list_size.30 ] [62])
        (mem/c/i:SI (symbol_ref:DI ("output_list_size")  <var_decl 0x7f2f6c4b8dc0 output_list_size>) [0 output_list_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 24 23 25 4 node.h:93 (set (reg:SI 1 dx [orig:63 output_list_size.31 ] [63])
        (reg:SI 0 ax [orig:62 output_list_size.30 ] [62])) 47 {*movsi_1} (nil))

(insn 25 24 26 4 node.h:93 (set (reg:SI 0 ax [orig:64 network_size.32 ] [64])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 26 25 27 4 node.h:93 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:63 output_list_size.31 ] [63])
            (reg:SI 0 ax [orig:64 network_size.32 ] [64]))) 6 {*cmpsi_1} (nil))

(jump_insn 27 26 31 4 node.h:93 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 197)
            (pc))) 616 {*jcc_1} (nil)
 -> 197)
;; End of basic block 4 -> ( 26 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  26
;; Succ edge  5 (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65

;; Pred edge  4 (fallthru)
(code_label 31 27 32 5 26 "" [0 uses])

(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 33 32 34 5 node.h:94 (set (reg:SI 0 ax [orig:65 historylength.33 ] [65])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 34 33 35 5 node.h:94 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:65 historylength.33 ] [65])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 35 34 39 5 node.h:94 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 202)
            (pc))) 616 {*jcc_1} (nil)
 -> 202)
;; End of basic block 5 -> ( 27 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  27
;; Succ edge  6 (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66 67 68 69

;; Pred edge  5 (fallthru)
(code_label 39 35 40 6 27 "" [0 uses])

(note 40 39 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 42 6 node.h:98 (set (reg:SI 0 ax [orig:66 network_size.34 ] [66])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 42 41 43 6 node.h:98 (parallel [
            (set (reg:SI 0 ax [orig:67 D.49868 ] [67])
                (ashift:SI (reg:SI 0 ax [orig:66 network_size.34 ] [66])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 494 {*ashlsi3_1} (nil))

(insn 43 42 44 6 node.h:98 (parallel [
            (set (reg:SI 0 ax [orig:68 D.35 ] [68])
                (plus:SI (reg:SI 0 ax [orig:67 D.49868 ] [67])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))

(insn 44 43 45 6 node.h:98 (set (mem/c/i:SI (symbol_ref:DI ("D")  <var_decl 0x7f2f6c4b8e60 D>) [0 D+0 S4 A32])
        (reg:SI 0 ax [orig:68 D.35 ] [68])) 47 {*movsi_1} (nil))

(insn 45 44 46 6 node.h:99 (set (reg:SI 0 ax [orig:69 debug.36 ] [69])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 46 45 47 6 node.h:99 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:69 debug.36 ] [69])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 47 46 48 6 node.h:99 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 57)
            (pc))) 616 {*jcc_1} (nil)
 -> 57)
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)
;; Succ edge  8

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 71 72

;; Pred edge  6 (fallthru)
(note 48 47 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 7 node.h:99 (set (reg:SI 1 dx [orig:70 network_size.37 ] [70])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 50 49 51 7 node.h:99 (set (reg:SI 2 cx [orig:71 historylength.38 ] [71])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 51 50 53 7 node.h:99 (set (reg/f:DI 0 ax [orig:72 D.49875 ] [72])
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <string_cst 0x7f2f6b9e59a0>)) 89 {*movdi_1_rex64} (nil))

(insn 53 51 54 7 node.h:99 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:71 historylength.38 ] [71])) 47 {*movsi_1} (nil))

(insn 54 53 55 7 node.h:99 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:72 D.49875 ] [72])) 89 {*movdi_1_rex64} (nil))

(insn 55 54 56 7 node.h:99 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 56 55 57 7 node.h:99 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                    (nil))))))
;; End of basic block 7 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73 74 75 76 77 121

;; Pred edge  6
;; Pred edge  7 (fallthru)
(code_label 57 56 58 8 28 "" [1 uses])

(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 59 58 60 8 node.h:104 (set (reg:SI 0 ax [orig:73 historylength.39 ] [73])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 60 59 61 8 node.h:104 (set (reg:DI 0 ax [orig:74 D.49877 ] [74])
        (sign_extend:DI (reg:SI 0 ax [orig:73 historylength.39 ] [73]))) 127 {extendsidi2_rex64} (nil))

(insn 61 60 62 8 node.h:104 (parallel [
            (set (reg:DI 0 ax [orig:75 D.49878 ] [75])
                (ashift:DI (reg:DI 0 ax [orig:74 D.49877 ] [74])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 62 61 63 8 node.h:104 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:75 D.49878 ] [75])) 89 {*movdi_1_rex64} (nil))

(call_insn 63 62 67 8 node.h:104 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f2f6d770700 malloc>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 67 63 68 8 node.h:104 (set (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])
        (reg/f:DI 0 ax [orig:77 network.40 ] [77])) 89 {*movdi_1_rex64} (nil))

(insn 68 67 180 8 node.h:105 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 180 68 181 8 node.h:105 (set (pc)
        (label_ref 108)) 631 {jump} (nil)
 -> 108)
;; End of basic block 8 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 [100.0%] 

(barrier 181 180 112)

;; Start of basic block ( 13) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 80 81 82 83 84 85 86 87 88 122

;; Pred edge  13
(code_label 112 181 71 9 32 "" [1 uses])

(note 71 112 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 72 71 73 9 node.h:108 (set (reg/f:DI 0 ax [orig:80 network.41 ] [80])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 73 72 74 9 node.h:108 (set (reg:DI 1 dx [orig:81 D.49882 ] [81])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 74 73 75 9 node.h:108 (parallel [
            (set (reg:DI 1 dx [orig:82 D.49883 ] [82])
                (ashift:DI (reg:DI 1 dx [orig:81 D.49882 ] [81])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 75 74 76 9 node.h:108 (parallel [
            (set (reg/f:DI 3 bx [orig:83 D.49884 ] [83])
                (plus:DI (reg/f:DI 0 ax [orig:80 network.41 ] [80])
                    (reg:DI 1 dx [orig:82 D.49883 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 76 75 77 9 node.h:108 (set (reg:SI 0 ax [orig:84 D.42 ] [84])
        (mem/c/i:SI (symbol_ref:DI ("D")  <var_decl 0x7f2f6c4b8e60 D>) [0 D+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 77 76 78 9 node.h:108 (set (reg:DI 0 ax [orig:85 D.49886 ] [85])
        (zero_extend:DI (reg:SI 0 ax [orig:84 D.42 ] [84]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 78 77 79 9 node.h:108 (parallel [
            (set (reg:DI 0 ax [orig:86 D.49887 ] [86])
                (ashift:DI (reg:DI 0 ax [orig:85 D.49886 ] [85])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 79 78 80 9 node.h:108 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:86 D.49887 ] [86])) 89 {*movdi_1_rex64} (nil))

(call_insn 80 79 84 9 node.h:108 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f2f6d770700 malloc>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 84 80 85 9 node.h:108 (set (mem/f:DI (reg/f:DI 3 bx [orig:83 D.49884 ] [83]) [0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.49889 ] [88])) 89 {*movdi_1_rex64} (nil))

(insn 85 84 182 9 node.h:109 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 182 85 183 9 node.h:109 (set (pc)
        (label_ref 100)) 631 {jump} (nil)
 -> 100)
;; End of basic block 9 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 [100.0%] 

(barrier 183 182 103)

;; Start of basic block ( 11) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 96 97 123

;; Pred edge  11
(code_label 103 183 88 10 31 "" [1 uses])

(note 88 103 89 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 90 10 node.h:111 (set (reg/f:DI 0 ax [orig:90 network.43 ] [90])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 90 89 91 10 node.h:111 (set (reg:DI 1 dx [orig:91 D.49891 ] [91])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 91 90 92 10 node.h:111 (parallel [
            (set (reg:DI 1 dx [orig:92 D.49892 ] [92])
                (ashift:DI (reg:DI 1 dx [orig:91 D.49891 ] [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 92 91 93 10 node.h:111 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.49893 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:90 network.43 ] [90])
                    (reg:DI 1 dx [orig:92 D.49892 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 93 92 94 10 node.h:111 (set (reg/f:DI 0 ax [orig:94 D.49894 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [orig:93 D.49893 ] [93]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 94 93 95 10 node.h:111 (set (reg:DI 1 dx [orig:95 D.49895 ] [95])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 95 94 96 10 node.h:111 (parallel [
            (set (reg:DI 1 dx [orig:96 D.49896 ] [96])
                (ashift:DI (reg:DI 1 dx [orig:95 D.49895 ] [95])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 96 95 97 10 node.h:111 (parallel [
            (set (reg/f:DI 1 dx [orig:97 D.49897 ] [97])
                (plus:DI (reg/f:DI 0 ax [orig:94 D.49894 ] [94])
                    (reg:DI 1 dx [orig:96 D.49896 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 97 96 98 10 node.h:111 (set (reg:DF 0 ax [123])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 98 97 99 10 node.h:111 (set (mem:DF (reg/f:DI 1 dx [orig:97 D.49897 ] [97]) [0 S8 A64])
        (reg:DF 0 ax [123])) 104 {*movdf_integer_rex64} (nil))

(insn 99 98 100 10 node.h:109 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 (fallthru)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89

;; Pred edge  10 (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 100 99 101 11 30 "" [1 uses])

(note 101 100 102 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 102 101 104 11 node.h:109 (set (reg:SI 0 ax [orig:89 D.44 ] [89])
        (mem/c/i:SI (symbol_ref:DI ("D")  <var_decl 0x7f2f6c4b8e60 D>) [0 D+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 104 102 105 11 node.h:109 (set (reg:CC 17 flags)
        (compare:CC (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
            (reg:SI 0 ax [orig:89 D.44 ] [89]))) 6 {*cmpsi_1} (nil))

(jump_insn 105 104 106 11 node.h:109 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 616 {*jcc_1} (nil)
 -> 103)
;; End of basic block 11 -> ( 10 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10
;; Succ edge  12 (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  11 (fallthru)
(note 106 105 107 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 107 106 108 12 node.h:105 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)

;; Start of basic block ( 12 8) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 78 79

;; Pred edge  12 (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 108 107 109 13 29 "" [1 uses])

(note 109 108 110 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 110 109 113 13 node.h:105 (set (reg:SI 0 ax [orig:78 historylength.45 ] [78])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 113 110 114 13 node.h:105 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:79 historylength.46 ] [79])
            (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 114 113 115 13 node.h:105 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 616 {*jcc_1} (nil)
 -> 112)
;; End of basic block 13 -> ( 9 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9
;; Succ edge  14 (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98

;; Pred edge  13 (fallthru)
(note 115 114 116 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 116 115 117 14 node.h:114 (set (reg:SI 0 ax [orig:98 debug.47 ] [98])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 117 116 118 14 node.h:114 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 debug.47 ] [98])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 118 117 119 14 node.h:114 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 133)
            (pc))) 616 {*jcc_1} (nil)
 -> 133)
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  15 (fallthru)
;; Succ edge  16

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 99 100 101 102 103 104 105 106

;; Pred edge  14 (fallthru)
(note 119 118 120 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 120 119 121 15 node.h:114 (set (reg/f:DI 1 dx [orig:99 network.48 ] [99])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 121 120 122 15 node.h:116 (set (reg:SI 0 ax [orig:100 D.49 ] [100])
        (mem/c/i:SI (symbol_ref:DI ("D")  <var_decl 0x7f2f6c4b8e60 D>) [0 D+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 122 121 123 15 node.h:116 (set (reg:DI 2 cx [orig:101 D.49906 ] [101])
        (zero_extend:DI (reg:SI 0 ax [orig:100 D.49 ] [100]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 123 122 124 15 node.h:116 (set (reg:SI 0 ax [orig:102 historylength.50 ] [102])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 124 123 125 15 node.h:116 (set (reg:DI 0 ax [orig:103 D.49908 ] [103])
        (sign_extend:DI (reg:SI 0 ax [orig:102 historylength.50 ] [102]))) 127 {extendsidi2_rex64} (nil))

(insn 125 124 126 15 node.h:116 (parallel [
            (set (reg:DI 0 ax [orig:104 D.49909 ] [104])
                (mult:DI (reg:DI 0 ax [orig:103 D.49908 ] [103])
                    (reg:DI 2 cx [orig:101 D.49906 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) 334 {*muldi3_1} (nil))

(insn 126 125 127 15 node.h:114 (parallel [
            (set (reg:DI 2 cx [orig:105 D.49910 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 D.49909 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 127 126 129 15 node.h:114 (set (reg/f:DI 0 ax [orig:106 D.49911 ] [106])
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <string_cst 0x7f2f6ba054c0>)) 89 {*movdi_1_rex64} (nil))

(insn 129 127 130 15 node.h:114 (set (reg:DI 4 si)
        (reg:DI 2 cx [orig:105 D.49910 ] [105])) 89 {*movdi_1_rex64} (nil))

(insn 130 129 131 15 node.h:114 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:106 D.49911 ] [106])) 89 {*movdi_1_rex64} (nil))

(insn 131 130 132 15 node.h:114 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 132 131 133 15 node.h:114 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))
;; End of basic block 15 -> ( 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 (fallthru)

;; Start of basic block ( 14 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107

;; Pred edge  14
;; Pred edge  15 (fallthru)
(code_label 133 132 134 16 33 "" [1 uses])

(note 134 133 135 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 135 134 136 16 node.h:117 (set (reg:SI 0 ax [orig:107 debug.51 ] [107])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 136 135 137 16 node.h:117 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:107 debug.51 ] [107])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 137 136 138 16 node.h:117 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 141)
            (pc))) 616 {*jcc_1} (nil)
 -> 141)
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17 (fallthru)
;; Succ edge  18

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  16 (fallthru)
(note 138 137 139 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 139 138 140 17 node.h:117 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <string_cst 0x7f2f6b9d3930>)) 89 {*movdi_1_rex64} (nil))

(call_insn 140 139 141 17 node.h:117 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f2f6d752700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 17 -> ( 18)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  18 (fallthru)

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 108

;; Pred edge  16
;; Pred edge  17 (fallthru)
(code_label 141 140 142 18 34 "" [1 uses])

(note 142 141 143 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 143 142 144 18 node.h:118 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 144 143 145 18 node.h:118 (call (mem:QI (symbol_ref:DI ("update_input") [flags 0x3]  <function_decl 0x7f2f6c26e900 update_input>) [0 S1 A8])
        (const_int 0 [0x0])) 639 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (nil)))

(insn 145 144 146 18 node.h:119 (set (reg:SI 0 ax [orig:108 debug.52 ] [108])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 146 145 147 18 node.h:119 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:108 debug.52 ] [108])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 147 146 148 18 node.h:119 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 151)
            (pc))) 616 {*jcc_1} (nil)
 -> 151)
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  19 (fallthru)
;; Succ edge  20

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  18 (fallthru)
(note 148 147 149 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 149 148 150 19 node.h:119 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <string_cst 0x7f2f6ba05640>)) 89 {*movdi_1_rex64} (nil))

(call_insn 150 149 151 19 node.h:119 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f2f6d752700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 19 -> ( 20)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  20 (fallthru)

;; Start of basic block ( 18 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 111 112 113

;; Pred edge  18
;; Pred edge  19 (fallthru)
(code_label 151 150 152 20 35 "" [1 uses])

(note 152 151 153 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 153 152 154 20 node.h:120 (set (reg:SI 1 dx [orig:109 input_list_size.53 ] [109])
        (mem/c/i:SI (symbol_ref:DI ("input_list_size")  <var_decl 0x7f2f6c4b8d20 input_list_size>) [0 input_list_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 154 153 155 20 node.h:120 (set (reg:SI 0 ax [orig:110 output_list_size.54 ] [110])
        (mem/c/i:SI (symbol_ref:DI ("output_list_size")  <var_decl 0x7f2f6c4b8dc0 output_list_size>) [0 output_list_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 155 154 156 20 node.h:120 (parallel [
            (set (reg:SI 0 ax [orig:111 D.49920 ] [111])
                (plus:SI (reg:SI 1 dx [orig:109 input_list_size.53 ] [109])
                    (reg:SI 0 ax [orig:110 output_list_size.54 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))

(insn 156 155 157 20 node.h:120 (set (reg:SI 1 dx [orig:112 D.49921 ] [112])
        (reg:SI 0 ax [orig:111 D.49920 ] [111])) 47 {*movsi_1} (nil))

(insn 157 156 158 20 node.h:120 (set (reg:SI 0 ax [orig:113 network_size.55 ] [113])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 158 157 159 20 node.h:120 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:112 D.49921 ] [112])
            (reg:SI 0 ax [orig:113 network_size.55 ] [113]))) 6 {*cmpsi_1} (nil))

(jump_insn 159 158 160 20 node.h:120 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 172)
            (pc))) 616 {*jcc_1} (nil)
 -> 172)
;; End of basic block 20 -> ( 21 22)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 (fallthru)
;; Succ edge  22

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 114 115 116 117 118 119 120

;; Pred edge  20 (fallthru)
(note 160 159 161 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 161 160 162 21 node.h:122 (set (reg:SI 1 dx [orig:114 output_list_size.56 ] [114])
        (mem/c/i:SI (symbol_ref:DI ("output_list_size")  <var_decl 0x7f2f6c4b8dc0 output_list_size>) [0 output_list_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 162 161 163 21 node.h:122 (set (reg:SI 0 ax [orig:115 input_list_size.57 ] [115])
        (mem/c/i:SI (symbol_ref:DI ("input_list_size")  <var_decl 0x7f2f6c4b8d20 input_list_size>) [0 input_list_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 163 162 164 21 node.h:122 (parallel [
            (set (reg:SI 0 ax [orig:116 D.49927 ] [116])
                (plus:SI (reg:SI 1 dx [orig:114 output_list_size.56 ] [114])
                    (reg:SI 0 ax [orig:115 input_list_size.57 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))

(insn 164 163 165 21 node.h:121 (set (reg:SI 1 dx [orig:117 D.49928 ] [117])
        (reg:SI 0 ax [orig:116 D.49927 ] [116])) 47 {*movsi_1} (nil))

(insn 165 164 166 21 node.h:121 (set (reg:SI 0 ax [orig:118 network_size.58 ] [118])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 166 165 167 21 node.h:121 (parallel [
            (set (reg:SI 1 dx [orig:119 D.49930 ] [119])
                (minus:SI (reg:SI 1 dx [orig:117 D.49928 ] [117])
                    (reg:SI 0 ax [orig:118 network_size.58 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) 291 {*subsi_1} (nil))

(insn 167 166 168 21 node.h:121 (set (reg/f:DI 0 ax [orig:120 D.49931 ] [120])
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <string_cst 0x7f2f6ba05700>)) 89 {*movdi_1_rex64} (nil))

(insn 168 167 169 21 node.h:121 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:119 D.49930 ] [119])) 47 {*movsi_1} (nil))

(insn 169 168 170 21 node.h:121 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:120 D.49931 ] [120])) 89 {*movdi_1_rex64} (nil))

(insn 170 169 171 21 node.h:121 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 171 170 172 21 node.h:121 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
                (nil)))))
;; End of basic block 21 -> ( 22)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  22 (fallthru)

;; Start of basic block ( 20 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  20
;; Pred edge  21 (fallthru)
(code_label 172 171 173 22 36 "" [1 uses])

(note 173 172 174 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 174 173 175 22 node.h:124 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 175 174 184 22 node.h:124 (call (mem:QI (symbol_ref:DI ("W_init") [flags 0x3]  <function_decl 0x7f2f6c26e600 W_init>) [0 S1 A8])
        (const_int 0 [0x0])) 639 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (nil)))

(jump_insn 184 175 185 22 (set (pc)
        (label_ref 178)) 631 {jump} (nil)
 -> 178)
;; End of basic block 22 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23

(barrier 185 184 187)

;; Start of basic block ( 2) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  2
(code_label 187 185 186 24 37 "" [1 uses])

(note 186 187 188 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 188 186 189 24 node.h:91 (const_int 0 [0x0]) 653 {nop} (nil))

(jump_insn 189 188 190 24 (set (pc)
        (label_ref 178)) 631 {jump} (nil)
 -> 178)
;; End of basic block 24 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 [100.0%] 

(barrier 190 189 192)

;; Start of basic block ( 3) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  3
(code_label 192 190 191 25 38 "" [1 uses])

(note 191 192 193 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 193 191 194 25 node.h:92 (const_int 0 [0x0]) 653 {nop} (nil))

(jump_insn 194 193 195 25 (set (pc)
        (label_ref 178)) 631 {jump} (nil)
 -> 178)
;; End of basic block 25 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 [100.0%] 

(barrier 195 194 197)

;; Start of basic block ( 4) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  4
(code_label 197 195 196 26 39 "" [1 uses])

(note 196 197 198 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 198 196 199 26 node.h:93 (const_int 0 [0x0]) 653 {nop} (nil))

(jump_insn 199 198 200 26 (set (pc)
        (label_ref 178)) 631 {jump} (nil)
 -> 178)
;; End of basic block 26 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 [100.0%] 

(barrier 200 199 202)

;; Start of basic block ( 5) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  5
(code_label 202 200 201 27 40 "" [1 uses])

(note 201 202 203 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 203 201 178 27 node.h:94 (const_int 0 [0x0]) 653 {nop} (nil))
;; End of basic block 27 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 [100.0%]  (fallthru)

;; Start of basic block ( 27 22 24 25 26) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  27 [100.0%]  (fallthru)
;; Pred edge  22
;; Pred edge  24 [100.0%] 
;; Pred edge  25 [100.0%] 
;; Pred edge  26 [100.0%] 
(code_label 178 203 179 23 22 "" [4 uses])

(note 179 178 204 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 23 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 204 179 0 NOTE_INSN_DELETED)


;; Function network_term (network_term)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a1 (r66,l0) best DIREG, cover GENERAL_REGS
    r65: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a4 (r65,l0) best DIREG, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a1(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a3(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a5(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a7(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a8(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a9(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8

   Insn 45(l0): point = 0
   Insn 44(l0): point = 2
   Insn 41(l0): point = 5
   Insn 40(l0): point = 7
   Insn 38(l0): point = 10
   Insn 37(l0): point = 12
   Insn 36(l0): point = 14
   Insn 35(l0): point = 16
   Insn 34(l0): point = 18
   Insn 33(l0): point = 20
   Insn 31(l0): point = 23
   Insn 30(l0): point = 25
   Insn 28(l0): point = 27
   Insn 27(l0): point = 29
   Insn 24(l0): point = 32
   Insn 23(l0): point = 34
   Insn 22(l0): point = 36
   Insn 21(l0): point = 38
   Insn 20(l0): point = 40
   Insn 19(l0): point = 42
   Insn 18(l0): point = 44
   Insn 17(l0): point = 46
   Insn 48(l0): point = 49
   Insn 13(l0): point = 51
   Insn 10(l0): point = 54
   Insn 9(l0): point = 56
   Insn 7(l0): point = 59
   Insn 6(l0): point = 61
   Insn 5(l0): point = 63
 a0(r67): [13..14]
 a1(r66): [19..20]
 a2(r60): [26..27]
 a3(r59): [28..29]
 a4(r65): [37..38]
 a5(r64): [39..40]
 a6(r63): [41..42]
 a7(r61): [41..46]
 a8(r62): [43..44]
 a9(r58): [62..63]
Compressing live ranges: from 66 to 19 - 28%
Ranges after the compression:
 a0(r67): [0..1]
 a1(r66): [2..3]
 a2(r60): [4..5]
 a3(r59): [6..7]
 a4(r65): [8..9]
 a5(r64): [10..11]
 a6(r63): [12..13]
 a7(r61): [12..16]
 a8(r62): [14..15]
 a9(r58): [17..18]
  regions=2, blocks=10, points=19
    allocnos=10, copies=0, conflicts=0, ranges=10
Disposition:
    9:r58  l0     0    3:r59  l0     0    2:r60  l0     0    7:r61  l0     0
    8:r62  l0     1    6:r63  l0     1    5:r64  l0     0    4:r65  l0     0
    1:r66  l0     0    0:r67  l0     0
+++Costs: overall -2, reg -2, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 58
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 5
insn=10, live_throughout: 7, dead_or_set: 0, 5
insn=11, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 
insn=48, live_throughout: 7, dead_or_set: 
insn=29, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 61
insn=18, live_throughout: 7, 61, dead_or_set: 62
insn=19, live_throughout: 7, 61, dead_or_set: 62, 63
insn=20, live_throughout: 7, dead_or_set: 61, 63, 64
insn=21, live_throughout: 7, dead_or_set: 64, 65
insn=22, live_throughout: 7, dead_or_set: 5, 65
insn=23, live_throughout: 7, dead_or_set: 5
insn=24, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 
insn=27, live_throughout: 7, dead_or_set: 59
insn=28, live_throughout: 7, dead_or_set: 59, 60
insn=30, live_throughout: 7, dead_or_set: 60
insn=31, live_throughout: 7, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 66
insn=34, live_throughout: 7, dead_or_set: 5, 66
insn=35, live_throughout: 7, dead_or_set: 5
insn=36, live_throughout: 7, dead_or_set: 67
insn=37, live_throughout: 7, dead_or_set: 67
insn=38, live_throughout: 7, dead_or_set: 
insn=40, live_throughout: 7, dead_or_set: 5
insn=41, live_throughout: 7, dead_or_set: 0, 5
insn=42, live_throughout: 7, dead_or_set: 
insn=44, live_throughout: 7, dead_or_set: 0
insn=45, live_throughout: 7, dead_or_set: 0
changing reg in insn 5
changing reg in insn 6
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 17
changing reg in insn 20
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
deleting insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 45.


network_term

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={14d,8u} r1={8d,2u} r2={6d} r4={6d} r5={10d,4u} r6={1d,14u} r7={1d,14u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={11d,3u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} 
;;    total ref usage 304{258d,46u,0e} in 28{23 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 58

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 node.h:130 (set (reg:SI 0 ax [orig:58 debug.20 ] [58])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 6 5 7 2 node.h:130 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:58 debug.20 ] [58])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 7 6 8 2 node.h:130 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 11)
            (pc))) 616 {*jcc_1} (nil)
 -> 11)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  2 (fallthru)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 10 3 node.h:130 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <string_cst 0x7f2f6b9d3af0>)) 89 {*movdi_1_rex64} (nil))

(call_insn 10 9 11 3 node.h:130 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f2f6d752700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  2
;; Pred edge  3 (fallthru)
(code_label 11 10 12 4 42 "" [1 uses])

(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 48 4 node.h:131 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 48 13 49 4 node.h:131 (set (pc)
        (label_ref 25)) 631 {jump} (nil)
 -> 25)
;; End of basic block 4 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 [100.0%] 

(barrier 49 48 29)

;; Start of basic block ( 6) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 62 63 64 65

;; Pred edge  6
(code_label 29 49 16 5 44 "" [1 uses])

(note 16 29 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 5 node.h:133 (set (reg/f:DI 0 ax [orig:61 network.21 ] [61])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 18 17 19 5 node.h:133 (set (reg:DI 1 dx [orig:62 D.49841 ] [62])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 19 18 20 5 node.h:133 (parallel [
            (set (reg:DI 1 dx [orig:63 D.49842 ] [63])
                (ashift:DI (reg:DI 1 dx [orig:62 D.49841 ] [62])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 20 19 21 5 node.h:133 (parallel [
            (set (reg/f:DI 0 ax [orig:64 D.49843 ] [64])
                (plus:DI (reg/f:DI 0 ax [orig:61 network.21 ] [61])
                    (reg:DI 1 dx [orig:63 D.49842 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 21 20 22 5 node.h:133 (set (reg/f:DI 0 ax [orig:65 D.49844 ] [65])
        (mem/f:DI (reg/f:DI 0 ax [orig:64 D.49843 ] [64]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 22 21 23 5 node.h:133 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:65 D.49844 ] [65])) 89 {*movdi_1_rex64} (nil))

(call_insn 23 22 24 5 node.h:133 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f2f6d767c00 free>) [0 S1 A8])
        (const_int 0 [0x0])) 639 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 24 23 25 5 node.h:131 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60

;; Pred edge  5 (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 25 24 26 6 43 "" [1 uses])

(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 30 6 node.h:131 (set (reg:SI 0 ax [orig:59 historylength.22 ] [59])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 30 27 31 6 node.h:131 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:60 historylength.23 ] [60])
            (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 31 30 32 6 node.h:131 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 616 {*jcc_1} (nil)
 -> 29)
;; End of basic block 6 -> ( 5 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5
;; Succ edge  7 (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 67

;; Pred edge  6 (fallthru)
(note 32 31 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 33 32 34 7 node.h:135 (set (reg/f:DI 0 ax [orig:66 network.24 ] [66])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 34 33 35 7 node.h:135 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:66 network.24 ] [66])) 89 {*movdi_1_rex64} (nil))

(call_insn 35 34 36 7 node.h:135 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f2f6d767c00 free>) [0 S1 A8])
        (const_int 0 [0x0])) 639 {*call_0} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 36 35 37 7 node.h:136 (set (reg:SI 0 ax [orig:67 debug.25 ] [67])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 37 36 38 7 node.h:136 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:67 debug.25 ] [67])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 38 37 39 7 node.h:136 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 42)
            (pc))) 616 {*jcc_1} (nil)
 -> 42)
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  9

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  7 (fallthru)
(note 39 38 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 40 39 41 8 node.h:136 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <string_cst 0x7f2f6b9c8f00>)) 89 {*movdi_1_rex64} (nil))

(call_insn 41 40 42 8 node.h:136 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f2f6d752700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  7
;; Pred edge  8 (fallthru)
(code_label 42 41 43 9 45 "" [1 uses])

(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 45 9 node.h:137 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 45 44 50 9 node.h:137 (call (mem:QI (symbol_ref:DI ("W_term") [flags 0x3]  <function_decl 0x7f2f6c26e700 W_term>) [0 S1 A8])
        (const_int 0 [0x0])) 639 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (nil)))
;; End of basic block 9 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 50 45 0 NOTE_INSN_DELETED)


;; Function sigmoid (sigmoid)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r62: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a3 (r62,l0) best SSE_REGS, cover SSE_REGS
    r61: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a4 (r61,l0) best SSE_REGS, cover SSE_REGS
    r60: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a0 (r60,l0) best SSE_FIRST_REG, cover SSE_REGS
    r59: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a1 (r59,l0) best SSE_FIRST_REG, cover SSE_REGS
    r58: preferred SSE_FIRST_REG, alternative SSE_REGS, cover SSE_REGS
    a2 (r58,l0) best SSE_FIRST_REG, cover SSE_REGS

  a0(r60,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 FP_TOP_REG:4,4 FP_SECOND_REG:4,4 FLOAT_REGS:4,4 MEM:11
  a1(r59,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 FP_TOP_REG:4,4 FP_SECOND_REG:4,4 FLOAT_REGS:4,4 MEM:11
  a2(r58,l0) costs: AREG:17,17 DREG:17,17 CREG:17,17 BREG:17,17 SIREG:17,17 DIREG:17,17 AD_REGS:17,17 CLOBBERED_REGS:17,17 Q_REGS:17,17 NON_Q_REGS:17,17 LEGACY_REGS:17,17 GENERAL_REGS:17,17 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 FP_TOP_REG:25,25 FP_SECOND_REG:25,25 FLOAT_REGS:25,25 MEM:15
  a3(r62,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a4(r61,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12

   Insn 19(l0): point = 0
   Insn 16(l0): point = 2
   Insn 12(l0): point = 4
   Insn 11(l0): point = 6
   Insn 10(l0): point = 8
   Insn 9(l0): point = 10
   Insn 8(l0): point = 12
   Insn 7(l0): point = 14
   Insn 6(l0): point = 16
   Insn 2(l0): point = 18
 a0(r60): [3..4]
 a1(r59): [5..6]
 a2(r58): [11..12]
 a3(r62): [13..14]
 a4(r61): [13..16]
Compressing live ranges: from 21 to 9 - 42%
Ranges after the compression:
 a0(r60): [0..1]
 a1(r59): [2..3]
 a2(r58): [4..5]
 a3(r62): [6..7]
 a4(r61): [6..8]
  regions=1, blocks=3, points=9
    allocnos=5, copies=0, conflicts=0, ranges=5
Disposition:
    2:r58  l0    21    1:r59  l0    21    0:r60  l0    21    4:r61  l0    21
    3:r62  l0    22
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 21
insn=6, live_throughout: 7, dead_or_set: 61
insn=7, live_throughout: 7, 61, dead_or_set: 62
insn=8, live_throughout: 7, dead_or_set: 58, 61, 62
insn=9, live_throughout: 7, dead_or_set: 21, 58
insn=10, live_throughout: 7, dead_or_set: 21
insn=11, live_throughout: 7, dead_or_set: 21, 59
insn=12, live_throughout: 7, dead_or_set: 59, 60
insn=16, live_throughout: 7, dead_or_set: 21, 60
insn=19, live_throughout: 7, 21, dead_or_set: 
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
deleting insn with uid = 9.
deleting insn with uid = 11.
deleting insn with uid = 12.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


sigmoid

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 6[bp] 7[sp] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={2d} r6={1d,4u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={4d,5u} r22={3d,1u} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 79{65d,14u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58 59 60 61 62

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 node.h:141 (set (mem/c/i:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 X+0 S8 A64])
        (reg:DF 21 xmm0 [ X ])) 104 {*movdf_integer_rex64} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 node.h:145 (set (reg:DF 21 xmm0 [61])
        (mem/c/i:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 X+0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 7 6 8 2 node.h:145 (set (reg:DF 22 xmm1 [62])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (expr_list:REG_EQUAL (const_double:DF 2.0e+1 [0x0.ap+5])
        (nil)))

(insn 8 7 10 2 node.h:145 (set (reg:DF 21 xmm0 [orig:58 D.49835 ] [58])
        (div:DF (reg:DF 21 xmm0 [61])
            (reg:DF 22 xmm1 [62]))) 724 {*fop_df_1_sse} (nil))

(call_insn/u 10 8 19 2 node.h:145 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("tanh") [flags 0x41]  <function_decl 0x7f2f6d730b00 tanh>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DF 21 xmm0))
        (nil)))

(insn 19 10 22 2 node.h:146 (use (reg/i:DF 21 xmm0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 22 19 0 NOTE_INSN_DELETED)


;; Function network_forward (network_forward)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 17 count 14 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a18 (r108,l0) best SIREG, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a46 (r106,l0) best SIREG, cover GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r105,l0) best DIREG, cover GENERAL_REGS
    r104: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a3 (r104,l0) best SIREG, cover GENERAL_REGS
    r103: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a4 (r103,l0) best SSE_FIRST_REG, cover SSE_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a17 (r89,l0) best DIREG, cover GENERAL_REGS
    r88: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a21 (r88,l0) best SSE_FIRST_REG, cover SSE_REGS
    r87: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a22 (r87,l0) best SSE_FIRST_REG, cover SSE_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a23 (r86,l0) best DIREG, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a24 (r84,l0) best SIREG, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a25 (r78,l0) best CREG, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a45 (r63,l0) best DIREG, cover GENERAL_REGS
    r62: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a47 (r62,l0) best DIREG, cover GENERAL_REGS
    r61: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a48 (r61,l0) best SIREG, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a51 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a1(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a4(r103,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 FP_TOP_REG:4,4 FP_SECOND_REG:4,4 FLOAT_REGS:4,4 MEM:11
  a5(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a7(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a8(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a9(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a10(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a11(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a12(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a13(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a14(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a15(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a16(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a17(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a18(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a19(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a20(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a21(r88,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 FP_TOP_REG:4,4 FP_SECOND_REG:4,4 FLOAT_REGS:4,4 MEM:12
  a22(r87,l0) costs: AREG:8,8 DREG:8,8 CREG:8,8 BREG:8,8 SIREG:8,8 DIREG:8,8 AD_REGS:8,8 CLOBBERED_REGS:8,8 Q_REGS:8,8 NON_Q_REGS:8,8 LEGACY_REGS:8,8 GENERAL_REGS:8,8 SSE_FIRST_REG:-2,-2 SSE_REGS:0,0 FP_TOP_REG:8,8 FP_SECOND_REG:8,8 FLOAT_REGS:8,8 MEM:15
  a23(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a24(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a25(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a26(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a27(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a28(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a29(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a30(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a31(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a32(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a33(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a34(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a35(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a36(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a37(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a38(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a39(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a40(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a41(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a42(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a43(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a44(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a45(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a46(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a47(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a48(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a49(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a50(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a51(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 132(l0): point = 1
   Insn 128(l0): point = 4
   Insn 116(l0): point = 7
   Insn 115(l0): point = 9
   Insn 113(l0): point = 11
   Insn 112(l0): point = 13
   Insn 109(l0): point = 16
   Insn 108(l0): point = 18
   Insn 107(l0): point = 20
   Insn 106(l0): point = 22
   Insn 105(l0): point = 24
   Insn 104(l0): point = 26
   Insn 103(l0): point = 28
   Insn 102(l0): point = 30
   Insn 101(l0): point = 32
   Insn 100(l0): point = 34
   Insn 99(l0): point = 36
   Insn 98(l0): point = 38
   Insn 97(l0): point = 40
   Insn 96(l0): point = 42
   Insn 95(l0): point = 44
   Insn 94(l0): point = 46
   Insn 93(l0): point = 48
   Insn 92(l0): point = 50
   Insn 91(l0): point = 52
   Insn 90(l0): point = 54
   Insn 89(l0): point = 56
   Insn 125(l0): point = 59
   Insn 85(l0): point = 61
   Insn 84(l0): point = 63
   Insn 83(l0): point = 65
   Insn 82(l0): point = 67
   Insn 81(l0): point = 69
   Insn 80(l0): point = 71
   Insn 79(l0): point = 73
   Insn 77(l0): point = 76
   Insn 76(l0): point = 78
   Insn 74(l0): point = 80
   Insn 71(l0): point = 83
   Insn 70(l0): point = 85
   Insn 69(l0): point = 87
   Insn 68(l0): point = 89
   Insn 67(l0): point = 91
   Insn 66(l0): point = 93
   Insn 65(l0): point = 95
   Insn 64(l0): point = 97
   Insn 63(l0): point = 99
   Insn 62(l0): point = 101
   Insn 61(l0): point = 103
   Insn 60(l0): point = 105
   Insn 59(l0): point = 107
   Insn 58(l0): point = 109
   Insn 57(l0): point = 111
   Insn 56(l0): point = 113
   Insn 55(l0): point = 115
   Insn 54(l0): point = 117
   Insn 53(l0): point = 119
   Insn 52(l0): point = 121
   Insn 51(l0): point = 123
   Insn 50(l0): point = 125
   Insn 49(l0): point = 127
   Insn 48(l0): point = 129
   Insn 47(l0): point = 131
   Insn 46(l0): point = 133
   Insn 45(l0): point = 135
   Insn 44(l0): point = 137
   Insn 43(l0): point = 139
   Insn 42(l0): point = 141
   Insn 41(l0): point = 143
   Insn 40(l0): point = 145
   Insn 39(l0): point = 147
   Insn 38(l0): point = 149
   Insn 37(l0): point = 151
   Insn 123(l0): point = 154
   Insn 33(l0): point = 156
   Insn 32(l0): point = 158
   Insn 31(l0): point = 160
   Insn 30(l0): point = 162
   Insn 29(l0): point = 164
   Insn 28(l0): point = 166
   Insn 27(l0): point = 168
   Insn 121(l0): point = 171
   Insn 20(l0): point = 173
   Insn 19(l0): point = 175
   Insn 18(l0): point = 177
   Insn 17(l0): point = 179
   Insn 16(l0): point = 181
   Insn 15(l0): point = 183
   Insn 13(l0): point = 186
   Insn 12(l0): point = 188
   Insn 11(l0): point = 190
   Insn 9(l0): point = 193
   Insn 8(l0): point = 195
   Insn 7(l0): point = 197
   Insn 6(l0): point = 199
   Insn 2(l0): point = 201
 a0(r91): [10..11]
 a1(r90): [12..13]
 a2(r105): [23..28]
 a3(r104): [25..30]
 a4(r103): [27..34]
 a5(r109): [31..32]
 a6(r102): [35..36]
 a7(r101): [37..38]
 a8(r96): [37..48]
 a9(r100): [39..40]
 a10(r99): [41..42]
 a11(r98): [43..44]
 a12(r97): [45..46]
 a13(r95): [49..50]
 a14(r94): [51..52]
 a15(r92): [51..56]
 a16(r93): [53..54]
 a17(r89): [68..73]
 a18(r108): [70..71]
 a19(r64): [79..80]
 a20(r72): [86..137]
 a21(r88): [86..87]
 a22(r87): [92..93]
 a23(r86): [98..107]
 a24(r84): [100..111]
 a25(r78): [104..123]
 a26(r85): [108..109]
 a27(r83): [112..113]
 a28(r79): [112..121]
 a29(r82): [114..115]
 a30(r81): [116..117]
 a31(r80): [118..119]
 a32(r77): [124..125]
 a33(r76): [126..127]
 a34(r73): [126..135]
 a35(r75): [128..129]
 a36(r74): [130..131]
 a37(r107): [132..133]
 a38(r71): [138..139]
 a39(r69): [138..143]
 a40(r70): [140..141]
 a41(r68): [144..145]
 a42(r67): [146..147]
 a43(r65): [146..151]
 a44(r66): [148..149]
 a45(r63): [163..168]
 a46(r106): [165..166]
 a47(r62): [178..181]
 a48(r61): [180..183]
 a49(r60): [189..190]
 a50(r59): [196..197]
 a51(r58): [198..199]
Compressing live ranges: from 204 to 97 - 47%
Ranges after the compression:
 a0(r91): [0..1]
 a1(r90): [2..3]
 a2(r105): [4..7]
 a3(r104): [5..8]
 a4(r103): [6..11]
 a5(r109): [9..10]
 a6(r102): [12..13]
 a7(r101): [14..15]
 a8(r96): [14..24]
 a9(r100): [16..17]
 a10(r99): [18..19]
 a11(r98): [20..21]
 a12(r97): [22..23]
 a13(r95): [25..26]
 a14(r94): [27..28]
 a15(r92): [27..31]
 a16(r93): [29..30]
 a17(r89): [32..35]
 a18(r108): [33..34]
 a19(r64): [36..37]
 a20(r72): [38..70]
 a21(r88): [38..39]
 a22(r87): [40..41]
 a23(r86): [42..45]
 a24(r84): [43..48]
 a25(r78): [44..58]
 a26(r85): [46..47]
 a27(r83): [49..50]
 a28(r79): [49..57]
 a29(r82): [51..52]
 a30(r81): [53..54]
 a31(r80): [55..56]
 a32(r77): [59..60]
 a33(r76): [61..62]
 a34(r73): [61..69]
 a35(r75): [63..64]
 a36(r74): [65..66]
 a37(r107): [67..68]
 a38(r71): [71..72]
 a39(r69): [71..75]
 a40(r70): [73..74]
 a41(r68): [76..77]
 a42(r67): [78..79]
 a43(r65): [78..82]
 a44(r66): [80..81]
 a45(r63): [83..86]
 a46(r106): [84..85]
 a47(r62): [87..89]
 a48(r61): [88..90]
 a49(r60): [91..92]
 a50(r59): [93..94]
 a51(r58): [95..96]
  regions=3, blocks=14, points=97
    allocnos=52, copies=0, conflicts=0, ranges=52
Disposition:
   51:r58  l0     0   50:r59  l0     0   49:r60  l0     0   48:r61  l0     1
   47:r62  l0     0   45:r63  l0     0   19:r64  l0     0   43:r65  l0     0
   44:r66  l0     1   42:r67  l0     1   41:r68  l0     0   39:r69  l0     0
   40:r70  l0     1   38:r71  l0     1   20:r72  l0     3   34:r73  l0     0
   36:r74  l0     1   35:r75  l0     1   33:r76  l0     1   32:r77  l0     0
   25:r78  l0     1   28:r79  l0     2   31:r80  l0     0   30:r81  l0     0
   29:r82  l0     0   27:r83  l0     0   24:r84  l0     4   26:r85  l0     0
   23:r86  l0     0   22:r87  l0    21   21:r88  l0    21   17:r89  l0     0
    1:r90  l0     0    0:r91  l0     0   15:r92  l0     0   16:r93  l0     1
   14:r94  l0     1   13:r95  l0     0    8:r96  l0     1   12:r97  l0     0
   11:r98  l0     0   10:r99  l0     0    9:r100 l0     0    7:r101 l0     0
    6:r102 l0     0    4:r103 l0    21    3:r104 l0     1    2:r105 l0     0
   46:r106 l0     1   37:r107 l0     1   18:r108 l0     1    5:r109 l0     0
+++Costs: overall -15, reg -15, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 7, dead_or_set: 5
insn=6, live_throughout: 7, dead_or_set: 58
insn=7, live_throughout: 7, dead_or_set: 58, 59
insn=8, live_throughout: 7, dead_or_set: 59
insn=9, live_throughout: 7, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 60
insn=12, live_throughout: 7, dead_or_set: 60
insn=13, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 61
insn=16, live_throughout: 7, 61, dead_or_set: 62
insn=17, live_throughout: 7, 62, dead_or_set: 4, 61
insn=18, live_throughout: 4, 7, dead_or_set: 5, 62
insn=19, live_throughout: 4, 5, 7, dead_or_set: 0
insn=20, live_throughout: 7, dead_or_set: 0, 4, 5
insn=121, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 
insn=27, live_throughout: 7, dead_or_set: 63
insn=28, live_throughout: 7, 63, dead_or_set: 106
insn=29, live_throughout: 7, 63, dead_or_set: 4, 106
insn=30, live_throughout: 4, 7, dead_or_set: 5, 63
insn=31, live_throughout: 4, 5, 7, dead_or_set: 0
insn=32, live_throughout: 7, dead_or_set: 0, 4, 5
insn=33, live_throughout: 7, dead_or_set: 
insn=123, live_throughout: 7, dead_or_set: 
insn=75, live_throughout: 7, dead_or_set: 
insn=37, live_throughout: 7, dead_or_set: 65
insn=38, live_throughout: 7, 65, dead_or_set: 66
insn=39, live_throughout: 7, 65, dead_or_set: 66, 67
insn=40, live_throughout: 7, dead_or_set: 65, 67, 68
insn=41, live_throughout: 7, dead_or_set: 68, 69
insn=42, live_throughout: 7, 69, dead_or_set: 70
insn=43, live_throughout: 7, 69, dead_or_set: 70, 71
insn=44, live_throughout: 7, dead_or_set: 69, 71, 72
insn=45, live_throughout: 7, 72, dead_or_set: 73
insn=46, live_throughout: 7, 72, 73, dead_or_set: 107
insn=47, live_throughout: 7, 72, 73, dead_or_set: 74, 107
insn=48, live_throughout: 7, 72, 73, dead_or_set: 74, 75
insn=49, live_throughout: 7, 72, 73, dead_or_set: 75, 76
insn=50, live_throughout: 7, 72, dead_or_set: 73, 76, 77
insn=51, live_throughout: 7, 72, dead_or_set: 77, 78
insn=52, live_throughout: 7, 72, 78, dead_or_set: 79
insn=53, live_throughout: 7, 72, 78, 79, dead_or_set: 80
insn=54, live_throughout: 7, 72, 78, 79, dead_or_set: 80, 81
insn=55, live_throughout: 7, 72, 78, 79, dead_or_set: 81, 82
insn=56, live_throughout: 7, 72, 78, 79, dead_or_set: 82, 83
insn=57, live_throughout: 7, 72, 78, dead_or_set: 79, 83, 84
insn=58, live_throughout: 7, 72, 78, 84, dead_or_set: 85
insn=59, live_throughout: 7, 72, 78, 84, dead_or_set: 85, 86
insn=60, live_throughout: 7, 72, 78, 84, 86, dead_or_set: 37
insn=61, live_throughout: 7, 37, 72, 84, 86, dead_or_set: 2, 78
insn=62, live_throughout: 2, 7, 37, 72, 84, 86, dead_or_set: 1
insn=63, live_throughout: 1, 2, 7, 37, 72, 86, dead_or_set: 4, 84
insn=64, live_throughout: 1, 2, 4, 7, 37, 72, dead_or_set: 5, 86
insn=65, live_throughout: 7, 72, dead_or_set: 1, 2, 4, 5, 21, 37
insn=66, live_throughout: 7, 72, dead_or_set: 21, 87
insn=67, live_throughout: 7, 72, dead_or_set: 21, 87
insn=68, live_throughout: 7, 72, dead_or_set: 21
insn=69, live_throughout: 7, 72, dead_or_set: 21, 88
insn=70, live_throughout: 7, dead_or_set: 72, 88
insn=71, live_throughout: 7, dead_or_set: 
insn=72, live_throughout: 7, dead_or_set: 
insn=74, live_throughout: 7, dead_or_set: 64
insn=76, live_throughout: 7, dead_or_set: 64
insn=77, live_throughout: 7, dead_or_set: 
insn=79, live_throughout: 7, dead_or_set: 89
insn=80, live_throughout: 7, 89, dead_or_set: 108
insn=81, live_throughout: 7, 89, dead_or_set: 4, 108
insn=82, live_throughout: 4, 7, dead_or_set: 5, 89
insn=83, live_throughout: 4, 5, 7, dead_or_set: 0
insn=84, live_throughout: 7, dead_or_set: 0, 4, 5
insn=85, live_throughout: 7, dead_or_set: 
insn=125, live_throughout: 7, dead_or_set: 
insn=114, live_throughout: 7, dead_or_set: 
insn=89, live_throughout: 7, dead_or_set: 92
insn=90, live_throughout: 7, 92, dead_or_set: 93
insn=91, live_throughout: 7, 92, dead_or_set: 93, 94
insn=92, live_throughout: 7, dead_or_set: 92, 94, 95
insn=93, live_throughout: 7, dead_or_set: 95, 96
insn=94, live_throughout: 7, 96, dead_or_set: 97
insn=95, live_throughout: 7, 96, dead_or_set: 97, 98
insn=96, live_throughout: 7, 96, dead_or_set: 98, 99
insn=97, live_throughout: 7, 96, dead_or_set: 99, 100
insn=98, live_throughout: 7, 96, dead_or_set: 100, 101
insn=99, live_throughout: 7, dead_or_set: 96, 101, 102
insn=100, live_throughout: 7, dead_or_set: 102, 103
insn=101, live_throughout: 7, 103, dead_or_set: 109
insn=102, live_throughout: 7, 103, dead_or_set: 104, 109
insn=103, live_throughout: 7, 103, 104, dead_or_set: 105
insn=104, live_throughout: 7, 104, 105, dead_or_set: 21, 103
insn=105, live_throughout: 7, 21, 105, dead_or_set: 4, 104
insn=106, live_throughout: 4, 7, 21, dead_or_set: 5, 105
insn=107, live_throughout: 4, 5, 7, 21, dead_or_set: 0
insn=108, live_throughout: 7, dead_or_set: 0, 4, 5, 21
insn=109, live_throughout: 7, dead_or_set: 
insn=110, live_throughout: 7, dead_or_set: 
insn=112, live_throughout: 7, dead_or_set: 90
insn=113, live_throughout: 7, dead_or_set: 90, 91
insn=115, live_throughout: 7, dead_or_set: 91
insn=116, live_throughout: 7, dead_or_set: 
insn=128, live_throughout: 7, dead_or_set: 
insn=131, live_throughout: 7, dead_or_set: 
insn=132, live_throughout: 7, dead_or_set: 
insn=119, live_throughout: 7, dead_or_set: 
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 17
changing reg in insn 16
changing reg in insn 18
changing reg in insn 27
changing reg in insn 30
changing reg in insn 74
changing reg in insn 76
changing reg in insn 37
changing reg in insn 40
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 44
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 70
changing reg in insn 45
changing reg in insn 50
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 61
changing reg in insn 52
changing reg in insn 57
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 63
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 79
changing reg in insn 82
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 89
changing reg in insn 92
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 99
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 104
changing reg in insn 102
changing reg in insn 105
changing reg in insn 103
changing reg in insn 106
changing reg in insn 28
changing reg in insn 29
changing reg in insn 46
changing reg in insn 47
changing reg in insn 80
changing reg in insn 81
changing reg in insn 101
changing reg in insn 102
deleting insn with uid = 7.
deleting insn with uid = 59.
deleting insn with uid = 63.
deleting insn with uid = 66.
deleting insn with uid = 67.
deleting insn with uid = 69.
deleting insn with uid = 104.
deleting insn with uid = 113.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 108.


network_forward

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 37[r8]
;;  ref usage 	r0={38d,31u} r1={24d,17u} r2={9d,2u} r3={1d,1u} r4={12d,5u} r5={12d,6u} r6={1d,32u} r7={1d,19u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={29d,4u} r18={6d} r19={6d} r20={1d,1u,2e} r21={8d,3u} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={8d,1u} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 492{368d,122u,2e} in 88{82 regular + 6 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 58 59

;; Pred edge  ENTRY (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 node.h:149 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 t+0 S4 A32])
        (reg:SI 5 di [ t ])) 47 {*movsi_1} (nil))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 8 2 node.h:151 (set (reg:SI 0 ax [orig:58 historylength.5 ] [58])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 8 6 9 2 node.h:151 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:59 historylength.6 ] [59])
            (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 t+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 9 8 10 2 node.h:151 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 25)
            (pc))) 616 {*jcc_1} (nil)
 -> 25)
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  5

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60

;; Pred edge  2 (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 3 node.h:153 (set (reg:SI 0 ax [orig:60 debug.7 ] [60])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 12 11 13 3 node.h:153 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:60 debug.7 ] [60])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 13 12 14 3 node.h:153 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref:DI 131)
            (pc))) 616 {*jcc_1} (nil)
 -> 131)
;; End of basic block 3 -> ( 4 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  13

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 62

;; Pred edge  3 (fallthru)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 4 node.h:153 (set (reg:SI 1 dx [orig:61 historylength.8 ] [61])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 16 15 17 4 node.h:153 (set (reg/f:DI 0 ax [orig:62 D.49789 ] [62])
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <string_cst 0x7f2f6ba07cd0>)) 89 {*movdi_1_rex64} (nil))

(insn 17 16 18 4 node.h:153 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:61 historylength.8 ] [61])) 47 {*movsi_1} (nil))

(insn 18 17 19 4 node.h:153 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:62 D.49789 ] [62])) 89 {*movdi_1_rex64} (nil))

(insn 19 18 20 4 node.h:153 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 20 19 121 4 node.h:153 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
                (nil)))))

(jump_insn 121 20 122 4 node.h:155 (set (pc)
        (label_ref 119)) 631 {jump} (nil)
 -> 119)
;; End of basic block 4 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 [100.0%] 

(barrier 122 121 25)

;; Start of basic block ( 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 63 106

;; Pred edge  2
(code_label 25 122 26 5 48 "" [1 uses])

(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 28 5 node.h:157 (set (reg/f:DI 0 ax [orig:63 D.49790 ] [63])
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <string_cst 0x7f2f6b9d3c78>)) 89 {*movdi_1_rex64} (nil))

(insn 28 27 29 5 node.h:157 (set (reg:SI 1 dx [106])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 t+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 29 28 30 5 node.h:157 (set (reg:SI 4 si)
        (reg:SI 1 dx [106])) 47 {*movsi_1} (nil))

(insn 30 29 31 5 node.h:157 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:63 D.49790 ] [63])) 89 {*movdi_1_rex64} (nil))

(insn 31 30 32 5 node.h:157 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 32 31 33 5 node.h:157 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
                (nil)))))

(insn 33 32 123 5 node.h:165 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 123 33 124 5 node.h:165 (set (pc)
        (label_ref 72)) 631 {jump} (nil)
 -> 72)
;; End of basic block 5 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 [100.0%] 

(barrier 124 123 75)

;; Start of basic block ( 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 107

;; Pred edge  7
(code_label 75 124 36 6 52 "" [1 uses])

(note 36 75 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 37 36 38 6 node.h:167 (set (reg/f:DI 0 ax [orig:65 network.9 ] [65])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 38 37 39 6 node.h:167 (set (reg:DI 1 dx [orig:66 D.49792 ] [66])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 t+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 39 38 40 6 node.h:167 (parallel [
            (set (reg:DI 1 dx [orig:67 D.49793 ] [67])
                (ashift:DI (reg:DI 1 dx [orig:66 D.49792 ] [66])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 40 39 41 6 node.h:167 (parallel [
            (set (reg/f:DI 0 ax [orig:68 D.49794 ] [68])
                (plus:DI (reg/f:DI 0 ax [orig:65 network.9 ] [65])
                    (reg:DI 1 dx [orig:67 D.49793 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 41 40 42 6 node.h:167 (set (reg/f:DI 0 ax [orig:69 D.49795 ] [69])
        (mem/f:DI (reg/f:DI 0 ax [orig:68 D.49794 ] [68]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 42 41 43 6 node.h:167 (set (reg:DI 1 dx [orig:70 D.49796 ] [70])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 43 42 44 6 node.h:167 (parallel [
            (set (reg:DI 1 dx [orig:71 D.49797 ] [71])
                (ashift:DI (reg:DI 1 dx [orig:70 D.49796 ] [70])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 44 43 45 6 node.h:167 (parallel [
            (set (reg/f:DI 3 bx [orig:72 D.49798 ] [72])
                (plus:DI (reg/f:DI 0 ax [orig:69 D.49795 ] [69])
                    (reg:DI 1 dx [orig:71 D.49797 ] [71])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 45 44 46 6 node.h:170 (set (reg/f:DI 0 ax [orig:73 network.10 ] [73])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 46 45 47 6 node.h:170 (set (reg:SI 1 dx [107])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 t+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 47 46 48 6 node.h:170 (parallel [
            (set (reg:SI 1 dx [orig:74 D.49800 ] [74])
                (plus:SI (reg:SI 1 dx [107])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 t+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 48 47 49 6 node.h:170 (set (reg:DI 1 dx [orig:75 D.49801 ] [75])
        (zero_extend:DI (reg:SI 1 dx [orig:74 D.49800 ] [74]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 49 48 50 6 node.h:170 (parallel [
            (set (reg:DI 1 dx [orig:76 D.49802 ] [76])
                (ashift:DI (reg:DI 1 dx [orig:75 D.49801 ] [75])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 50 49 51 6 node.h:170 (parallel [
            (set (reg/f:DI 0 ax [orig:77 D.49803 ] [77])
                (plus:DI (reg/f:DI 0 ax [orig:73 network.10 ] [73])
                    (reg:DI 1 dx [orig:76 D.49802 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 51 50 52 6 node.h:170 (set (reg/f:DI 1 dx [orig:78 D.49804 ] [78])
        (mem/f:DI (reg/f:DI 0 ax [orig:77 D.49803 ] [77]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 52 51 53 6 node.h:169 (set (reg/f:DI 2 cx [orig:79 W.11 ] [79])
        (mem/f/c/i:DI (symbol_ref:DI ("W")  <var_decl 0x7f2f6c4b8c80 W>) [0 W+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 53 52 54 6 node.h:169 (set (reg:SI 0 ax [orig:80 D.12 ] [80])
        (mem/c/i:SI (symbol_ref:DI ("D")  <var_decl 0x7f2f6c4b8e60 D>) [0 D+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 54 53 55 6 node.h:169 (parallel [
            (set (reg:SI 0 ax [orig:81 D.49807 ] [81])
                (mult:SI (reg:SI 0 ax [orig:80 D.12 ] [80])
                    (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 333 {*mulsi3_1} (nil))

(insn 55 54 56 6 node.h:167 (set (reg:DI 0 ax [orig:82 D.49808 ] [82])
        (zero_extend:DI (reg:SI 0 ax [orig:81 D.49807 ] [81]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 56 55 57 6 node.h:169 (parallel [
            (set (reg:DI 0 ax [orig:83 D.49809 ] [83])
                (ashift:DI (reg:DI 0 ax [orig:82 D.49808 ] [82])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 57 56 58 6 node.h:167 (parallel [
            (set (reg/f:DI 4 si [orig:84 D.49810 ] [84])
                (plus:DI (reg/f:DI 2 cx [orig:79 W.11 ] [79])
                    (reg:DI 0 ax [orig:83 D.49809 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 58 57 60 6 node.h:167 (set (reg:SI 0 ax [orig:85 D.13 ] [85])
        (mem/c/i:SI (symbol_ref:DI ("D")  <var_decl 0x7f2f6c4b8e60 D>) [0 D+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 60 58 61 6 node.h:167 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 61 60 62 6 node.h:167 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:78 D.49804 ] [78])) 89 {*movdi_1_rex64} (nil))

(insn 62 61 64 6 node.h:167 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 64 62 65 6 node.h:167 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:86 D.14 ] [86])) 47 {*movsi_1} (nil))

(call_insn 65 64 68 6 node.h:167 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cblas_ddot") [flags 0x41]  <function_decl 0x7f2f6bb10e00 cblas_ddot>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 37 r8))
                        (nil)))))))

(call_insn 68 65 70 6 node.h:167 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sigmoid") [flags 0x3]  <function_decl 0x7f2f6c26ec00 sigmoid>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DF 21 xmm0))
        (nil)))

(insn 70 68 71 6 node.h:167 (set (mem:DF (reg/f:DI 3 bx [orig:72 D.49798 ] [72]) [0 S8 A64])
        (reg:DF 21 xmm0 [orig:88 D.49814 ] [88])) 104 {*movdf_integer_rex64} (nil))

(insn 71 70 72 6 node.h:165 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64

;; Pred edge  6 (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 72 71 73 7 51 "" [1 uses])

(note 73 72 74 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 74 73 76 7 node.h:165 (set (reg:SI 0 ax [orig:64 network_size.15 ] [64])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 76 74 77 7 node.h:165 (set (reg:CC 17 flags)
        (compare:CC (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (reg:SI 0 ax [orig:64 network_size.15 ] [64]))) 6 {*cmpsi_1} (nil))

(jump_insn 77 76 78 7 node.h:165 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 75)
            (pc))) 616 {*jcc_1} (nil)
 -> 75)
;; End of basic block 7 -> ( 6 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6
;; Succ edge  8 (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 89 108

;; Pred edge  7 (fallthru)
(note 78 77 79 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 79 78 80 8 node.h:172 (set (reg/f:DI 0 ax [orig:89 D.49816 ] [89])
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <string_cst 0x7f2f6b9c8f30>)) 89 {*movdi_1_rex64} (nil))

(insn 80 79 81 8 node.h:172 (set (reg:SI 1 dx [108])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 t+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 81 80 82 8 node.h:172 (set (reg:SI 4 si)
        (reg:SI 1 dx [108])) 47 {*movsi_1} (nil))

(insn 82 81 83 8 node.h:172 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 D.49816 ] [89])) 89 {*movdi_1_rex64} (nil))

(insn 83 82 84 8 node.h:172 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 84 83 85 8 node.h:172 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
                (nil)))))

(insn 85 84 125 8 node.h:173 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 125 85 126 8 node.h:173 (set (pc)
        (label_ref 110)) 631 {jump} (nil)
 -> 110)
;; End of basic block 8 -> ( 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 [100.0%] 

(barrier 126 125 114)

;; Start of basic block ( 10) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 92 93 94 95 96 97 98 99 100 101 102 103 104 105 109

;; Pred edge  10
(code_label 114 126 88 9 54 "" [1 uses])

(note 88 114 89 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 90 9 node.h:176 (set (reg/f:DI 0 ax [orig:92 network.16 ] [92])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 90 89 91 9 node.h:176 (set (reg:DI 1 dx [orig:93 D.49818 ] [93])
        (zero_extend:DI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 t+0 S4 A32]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 91 90 92 9 node.h:176 (parallel [
            (set (reg:DI 1 dx [orig:94 D.49819 ] [94])
                (ashift:DI (reg:DI 1 dx [orig:93 D.49818 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 92 91 93 9 node.h:176 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.49820 ] [95])
                (plus:DI (reg/f:DI 0 ax [orig:92 network.16 ] [92])
                    (reg:DI 1 dx [orig:94 D.49819 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 93 92 94 9 node.h:176 (set (reg/f:DI 1 dx [orig:96 D.49821 ] [96])
        (mem/f:DI (reg/f:DI 0 ax [orig:95 D.49820 ] [95]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 94 93 95 9 node.h:176 (set (reg:SI 0 ax [orig:97 network_size.17 ] [97])
        (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 95 94 96 9 node.h:176 (parallel [
            (set (reg:SI 0 ax [orig:98 D.49823 ] [98])
                (minus:SI (reg:SI 0 ax [orig:97 network_size.17 ] [97])
                    (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) 291 {*subsi_1} (nil))

(insn 96 95 97 9 node.h:176 (parallel [
            (set (reg:SI 0 ax [orig:99 D.49824 ] [99])
                (plus:SI (reg:SI 0 ax [orig:98 D.49823 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))

(insn 97 96 98 9 node.h:176 (set (reg:DI 0 ax [orig:100 D.49825 ] [100])
        (zero_extend:DI (reg:SI 0 ax [orig:99 D.49824 ] [99]))) 123 {zero_extendsidi2_rex64} (nil))

(insn 98 97 99 9 node.h:176 (parallel [
            (set (reg:DI 0 ax [orig:101 D.49826 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:100 D.49825 ] [100])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 489 {*ashldi3_1_rex64} (nil))

(insn 99 98 100 9 node.h:176 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.49827 ] [102])
                (plus:DI (reg/f:DI 1 dx [orig:96 D.49821 ] [96])
                    (reg:DI 0 ax [orig:101 D.49826 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 100 99 101 9 node.h:175 (set (reg:DF 21 xmm0 [orig:103 D.49828 ] [103])
        (mem:DF (reg/f:DI 0 ax [orig:102 D.49827 ] [102]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 101 100 102 9 node.h:175 (set (reg:SI 0 ax [109])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 102 101 103 9 node.h:175 (parallel [
            (set (reg:SI 1 dx [orig:104 D.49829 ] [104])
                (plus:SI (reg:SI 0 ax [109])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

(insn 103 102 105 9 node.h:175 (set (reg/f:DI 0 ax [orig:105 D.49830 ] [105])
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <string_cst 0x7f2f6b9c8f60>)) 89 {*movdi_1_rex64} (nil))

(insn 105 103 106 9 node.h:175 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:104 D.49829 ] [104])) 47 {*movsi_1} (nil))

(insn 106 105 107 9 node.h:175 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:105 D.49830 ] [105])) 89 {*movdi_1_rex64} (nil))

(insn 107 106 108 9 node.h:175 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) 62 {*movqi_1} (nil))

(call_insn 108 107 109 9 node.h:175 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DF 21 xmm0))
                    (nil))))))

(insn 109 108 110 9 node.h:173 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91

;; Pred edge  9 (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 110 109 111 10 53 "" [1 uses])

(note 111 110 112 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 112 111 115 10 node.h:173 (set (reg:SI 0 ax [orig:90 output_list_size.18 ] [90])
        (mem/c/i:SI (symbol_ref:DI ("output_list_size")  <var_decl 0x7f2f6c4b8dc0 output_list_size>) [0 output_list_size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 115 112 116 10 node.h:173 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:91 output_list_size.19 ] [91])
            (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 116 115 127 10 node.h:173 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 114)
            (pc))) 616 {*jcc_1} (nil)
 -> 114)
;; End of basic block 10 -> ( 9 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9
;; Succ edge  12 (fallthru)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  10 (fallthru)
(note 127 116 128 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(jump_insn 128 127 129 12 (set (pc)
        (label_ref 119)) 631 {jump} (nil)
 -> 119)
;; End of basic block 12 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 [100.0%] 

(barrier 129 128 131)

;; Start of basic block ( 3) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  3
(code_label 131 129 130 13 55 "" [1 uses])

(note 130 131 132 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 132 130 119 13 node.h:155 (const_int 0 [0x0]) 653 {nop} (nil))
;; End of basic block 13 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 4 13 12) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  4 [100.0%] 
;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 119 132 120 11 47 "" [2 uses])

(note 120 119 133 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 11 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 133 120 0 NOTE_INSN_DELETED)


;; Function main (main)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 19 count 15 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r67,l0) best AREG, cover GENERAL_REGS
    r66: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a4 (r66,l0) best DIREG, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a9 (r60,l0) best DIREG, cover GENERAL_REGS
    r59: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a10 (r59,l0) best SIREG, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r67,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:52,52 SSE_REGS:52,52 MMX_REGS:52,52 MEM:15
  a2(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a5(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a7(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a8(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a9(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a10(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a11(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8

   Insn 82(l0): point = 0
   Insn 79(l0): point = 2
   Insn 75(l0): point = 4
   Insn 72(l0): point = 7
   Insn 71(l0): point = 9
   Insn 70(l0): point = 11
   Insn 68(l0): point = 14
   Insn 67(l0): point = 16
   Insn 65(l0): point = 18
   Insn 64(l0): point = 20
   Insn 61(l0): point = 23
   Insn 60(l0): point = 25
   Insn 59(l0): point = 27
   Insn 58(l0): point = 29
   Insn 57(l0): point = 31
   Insn 89(l0): point = 34
   Insn 53(l0): point = 36
   Insn 87(l0): point = 39
   Insn 48(l0): point = 41
   Insn 45(l0): point = 44
   Insn 44(l0): point = 46
   Insn 42(l0): point = 49
   Insn 41(l0): point = 51
   Insn 40(l0): point = 53
   Insn 38(l0): point = 56
   Insn 37(l0): point = 58
   Insn 36(l0): point = 60
   Insn 35(l0): point = 62
   Insn 34(l0): point = 64
   Insn 33(l0): point = 66
   Insn 32(l0): point = 68
   Insn 31(l0): point = 70
   Insn 30(l0): point = 72
   Insn 27(l0): point = 75
   Insn 26(l0): point = 77
   Insn 24(l0): point = 80
   Insn 23(l0): point = 82
   Insn 22(l0): point = 84
   Insn 85(l0): point = 87
   Insn 17(l0): point = 89
   Insn 16(l0): point = 91
   Insn 15(l0): point = 93
   Insn 14(l0): point = 95
   Insn 13(l0): point = 97
   Insn 12(l0): point = 99
   Insn 11(l0): point = 101
   Insn 10(l0): point = 103
   Insn 8(l0): point = 106
   Insn 7(l0): point = 108
   Insn 3(l0): point = 110
   Insn 2(l0): point = 112
 a0(r67): [3..4]
 a1(r58): [87..89] [39..41] [5..7]
 a2(r65): [17..18]
 a3(r64): [19..20]
 a4(r66): [28..29]
 a5(r69): [30..31]
 a6(r63): [52..53]
 a7(r62): [59..60]
 a8(r61): [83..84]
 a9(r60): [96..99]
 a10(r59): [98..101]
 a11(r68): [102..103]
Compressing live ranges: from 115 to 28 - 24%
Ranges after the compression:
 a0(r67): [0..1]
 a1(r58): [20..21] [12..13] [2..3]
 a2(r65): [4..5]
 a3(r64): [6..7]
 a4(r66): [8..9]
 a5(r69): [10..11]
 a6(r63): [14..15]
 a7(r62): [16..17]
 a8(r61): [18..19]
 a9(r60): [22..24]
 a10(r59): [23..25]
 a11(r68): [26..27]
  regions=2, blocks=15, points=28
    allocnos=12, copies=0, conflicts=0, ranges=14
Disposition:
    1:r58  l0     0   10:r59  l0     1    9:r60  l0     0    8:r61  l0     0
    7:r62  l0     0    6:r63  l0     0    3:r64  l0     0    2:r65  l0     0
    4:r66  l0     0    0:r67  l0     0   11:r68  l0     0    5:r69  l0     0
+++Costs: overall -4, reg -4, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 4, 7, dead_or_set: 5
insn=3, live_throughout: 7, dead_or_set: 4
insn=7, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 
insn=10, live_throughout: 7, dead_or_set: 68
insn=11, live_throughout: 7, dead_or_set: 59, 68
insn=12, live_throughout: 7, 59, dead_or_set: 60
insn=13, live_throughout: 7, 60, dead_or_set: 4, 59
insn=14, live_throughout: 4, 7, dead_or_set: 5, 60
insn=15, live_throughout: 4, 5, 7, dead_or_set: 0
insn=16, live_throughout: 7, dead_or_set: 0, 4, 5
insn=17, live_throughout: 7, dead_or_set: 58
insn=85, live_throughout: 7, 58, dead_or_set: 
insn=20, live_throughout: 7, dead_or_set: 
insn=22, live_throughout: 7, dead_or_set: 61
insn=23, live_throughout: 7, dead_or_set: 61
insn=24, live_throughout: 7, dead_or_set: 
insn=26, live_throughout: 7, dead_or_set: 5
insn=27, live_throughout: 7, dead_or_set: 0, 5
insn=28, live_throughout: 7, dead_or_set: 
insn=30, live_throughout: 7, dead_or_set: 
insn=31, live_throughout: 7, dead_or_set: 
insn=32, live_throughout: 7, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 
insn=34, live_throughout: 7, dead_or_set: 0
insn=35, live_throughout: 7, dead_or_set: 0
insn=36, live_throughout: 7, dead_or_set: 62
insn=37, live_throughout: 7, dead_or_set: 62
insn=38, live_throughout: 7, dead_or_set: 
insn=40, live_throughout: 7, dead_or_set: 63
insn=41, live_throughout: 7, dead_or_set: 63
insn=42, live_throughout: 7, dead_or_set: 
insn=44, live_throughout: 7, dead_or_set: 5
insn=45, live_throughout: 7, dead_or_set: 0, 5
insn=46, live_throughout: 7, dead_or_set: 
insn=48, live_throughout: 7, dead_or_set: 58
insn=87, live_throughout: 7, 58, dead_or_set: 
insn=51, live_throughout: 7, dead_or_set: 
insn=53, live_throughout: 7, dead_or_set: 
insn=89, live_throughout: 7, dead_or_set: 
insn=66, live_throughout: 7, dead_or_set: 
insn=57, live_throughout: 7, dead_or_set: 69
insn=58, live_throughout: 7, dead_or_set: 66, 69
insn=59, live_throughout: 7, dead_or_set: 5, 66
insn=60, live_throughout: 7, dead_or_set: 5
insn=61, live_throughout: 7, dead_or_set: 
insn=62, live_throughout: 7, dead_or_set: 
insn=64, live_throughout: 7, dead_or_set: 64
insn=65, live_throughout: 7, dead_or_set: 64, 65
insn=67, live_throughout: 7, dead_or_set: 65
insn=68, live_throughout: 7, dead_or_set: 
insn=70, live_throughout: 7, dead_or_set: 0
insn=71, live_throughout: 7, dead_or_set: 0
insn=72, live_throughout: 7, dead_or_set: 58
insn=73, live_throughout: 7, 58, dead_or_set: 
insn=75, live_throughout: 7, dead_or_set: 58, 67
insn=79, live_throughout: 7, dead_or_set: 0, 67
insn=82, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 72
changing reg in insn 48
changing reg in insn 17
changing reg in insn 75
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 14
changing reg in insn 22
changing reg in insn 23
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 58
changing reg in insn 59
changing reg in insn 75
changing reg in insn 79
changing reg in insn 10
changing reg in insn 11
changing reg in insn 57
changing reg in insn 58
deleting insn with uid = 65.
deleting insn with uid = 75.
deleting insn with uid = 79.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 71.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={21d,13u} r1={8d,1u} r2={7d} r4={8d,2u} r5={11d,5u} r6={1d,23u} r7={1d,20u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={13d,5u} r18={6d} r19={6d} r20={1d,1u,1e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 380{309d,70u,1e} in 48{42 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  ENTRY (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 test.c:6 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) 47 {*movsi_1} (nil))

(insn 3 2 4 2 test.c:6 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) 89 {*movdi_1_rex64} (nil))

(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 8 2 test.c:8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) 6 {*cmpsi_1} (nil))

(jump_insn 8 7 9 2 test.c:8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 616 {*jcc_1} (nil)
 -> 20)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58 59 60 68

;; Pred edge  2 (fallthru)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 11 3 test.c:10 (set (reg/f:DI 0 ax [68])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 argv+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 11 10 12 3 test.c:10 (set (reg/f:DI 1 dx [orig:59 D.49765 ] [59])
        (mem/f:DI (reg/f:DI 0 ax [68]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 12 11 13 3 test.c:10 (set (reg/f:DI 0 ax [orig:60 D.49766 ] [60])
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <string_cst 0x7f2f6b9d3d90>)) 89 {*movdi_1_rex64} (nil))

(insn 13 12 14 3 test.c:10 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:59 D.49765 ] [59])) 89 {*movdi_1_rex64} (nil))

(insn 14 13 15 3 test.c:10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:60 D.49766 ] [60])) 89 {*movdi_1_rex64} (nil))

(insn 15 14 16 3 test.c:10 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 16 15 17 3 test.c:10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f2f6d752000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))

(insn 17 16 85 3 test.c:11 (set (reg:SI 0 ax [orig:58 D.49767 ] [58])
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(jump_insn 85 17 86 3 test.c:11 (set (pc)
        (label_ref 73)) 631 {jump} (nil)
 -> 73)
;; End of basic block 3 -> ( 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58


;; Succ edge  14 [100.0%] 

(barrier 86 85 20)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61

;; Pred edge  2
(code_label 20 86 21 4 57 "" [1 uses])

(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 4 test.c:16 (set (reg:SI 0 ax [orig:61 debug.0 ] [61])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 23 22 24 4 test.c:16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:61 debug.0 ] [61])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 24 23 25 4 test.c:16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) 616 {*jcc_1} (nil)
 -> 28)
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  6

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  4 (fallthru)
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 5 test.c:16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <string_cst 0x7f2f6b9d3dc8>)) 89 {*movdi_1_rex64} (nil))

(call_insn 27 26 28 5 test.c:16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f2f6d752700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62

;; Pred edge  4
;; Pred edge  5 (fallthru)
(code_label 28 27 29 6 59 "" [1 uses])

(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 31 6 test.c:19 (set (mem/c/i:SI (symbol_ref:DI ("input_list_size")  <var_decl 0x7f2f6c4b8d20 input_list_size>) [0 input_list_size+0 S4 A32])
        (const_int 55 [0x37])) 47 {*movsi_1} (nil))

(insn 31 30 32 6 test.c:20 (set (mem/c/i:SI (symbol_ref:DI ("output_list_size")  <var_decl 0x7f2f6c4b8dc0 output_list_size>) [0 output_list_size+0 S4 A32])
        (const_int 15 [0xf])) 47 {*movsi_1} (nil))

(insn 32 31 33 6 test.c:21 (set (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])
        (const_int 100 [0x64])) 47 {*movsi_1} (nil))

(insn 33 32 34 6 test.c:22 (set (mem/c/i:SI (symbol_ref:DI ("network_size") [flags 0x2]  <var_decl 0x7f2f6c4b8aa0 network_size>) [0 network_size+0 S4 A32])
        (const_int 100 [0x64])) 47 {*movsi_1} (nil))

(insn 34 33 35 6 test.c:23 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 35 34 36 6 test.c:23 (call (mem:QI (symbol_ref:DI ("network_init") [flags 0x3]  <function_decl 0x7f2f6c26ea00 network_init>) [0 S1 A8])
        (const_int 0 [0x0])) 639 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (nil)))

(insn 36 35 37 6 test.c:24 (set (reg/f:DI 0 ax [orig:62 network.1 ] [62])
        (mem/f/c/i:DI (symbol_ref:DI ("network")  <var_decl 0x7f2f6c4b8be0 network>) [0 network+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 37 36 38 6 test.c:24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:62 network.1 ] [62])
            (const_int 0 [0x0]))) 3 {*cmpdi_ccno_1} (nil))

(jump_insn 38 37 39 6 test.c:24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 616 {*jcc_1} (nil)
 -> 51)
;; End of basic block 6 -> ( 7 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)
;; Succ edge  10

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63

;; Pred edge  6 (fallthru)
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 40 39 41 7 test.c:26 (set (reg:SI 0 ax [orig:63 debug.2 ] [63])
        (mem/c/i:SI (symbol_ref:DI ("debug") [flags 0x2]  <var_decl 0x7f2f6c4b8b40 debug>) [0 debug+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 41 40 42 7 test.c:26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:63 debug.2 ] [63])
            (const_int 0 [0x0]))) 2 {*cmpsi_ccno_1} (nil))

(jump_insn 42 41 43 7 test.c:26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 46)
            (pc))) 616 {*jcc_1} (nil)
 -> 46)
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  9

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  7 (fallthru)
(note 43 42 44 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 45 8 test.c:26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <string_cst 0x7f2f6b9de0c0>)) 89 {*movdi_1_rex64} (nil))

(call_insn 45 44 46 8 test.c:26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f2f6d752700 __builtin_puts>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 58

;; Pred edge  7
;; Pred edge  8 (fallthru)
(code_label 46 45 47 9 61 "" [1 uses])

(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 87 9 test.c:28 (set (reg:SI 0 ax [orig:58 D.49767 ] [58])
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(jump_insn 87 48 88 9 test.c:28 (set (pc)
        (label_ref 73)) 631 {jump} (nil)
 -> 73)
;; End of basic block 9 -> ( 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58


;; Succ edge  14 [100.0%] 

(barrier 88 87 51)

;; Start of basic block ( 6) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  6
(code_label 51 88 52 10 60 "" [1 uses])

(note 52 51 53 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 89 10 test.c:30 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 89 53 90 10 test.c:30 (set (pc)
        (label_ref 62)) 631 {jump} (nil)
 -> 62)
;; End of basic block 10 -> ( 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 [100.0%] 

(barrier 90 89 66)

;; Start of basic block ( 12) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 69

;; Pred edge  12
(code_label 66 90 56 11 63 "" [1 uses])

(note 56 66 57 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 58 11 test.c:32 (set (reg:SI 0 ax [69])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 58 57 59 11 test.c:32 (parallel [
            (set (reg:SI 0 ax [orig:66 D.49777 ] [66])
                (plus:SI (reg:SI 0 ax [69])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

(insn 59 58 60 11 test.c:32 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:66 D.49777 ] [66])) 47 {*movsi_1} (nil))

(call_insn 60 59 61 11 test.c:32 (call (mem:QI (symbol_ref:DI ("network_forward") [flags 0x3]  <function_decl 0x7f2f6c26ed00 network_forward>) [0 S1 A8])
        (const_int 0 [0x0])) 639 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (nil)))

(insn 61 60 62 11 test.c:30 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 252 {*addsi_1} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)

;; Start of basic block ( 11 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65

;; Pred edge  11 (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 62 61 63 12 62 "" [1 uses])

(note 63 62 64 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 64 63 67 12 test.c:30 (set (reg:SI 0 ax [orig:64 historylength.3 ] [64])
        (mem/c/i:SI (symbol_ref:DI ("historylength") [flags 0x2]  <var_decl 0x7f2f6c4b8a00 historylength>) [0 historylength+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 67 64 68 12 test.c:30 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:65 historylength.4 ] [65])
            (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) 6 {*cmpsi_1} (nil))

(jump_insn 68 67 69 12 test.c:30 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 616 {*jcc_1} (nil)
 -> 66)
;; End of basic block 12 -> ( 11 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11
;; Succ edge  13 (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58

;; Pred edge  12 (fallthru)
(note 69 68 70 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 71 13 test.c:34 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 71 70 72 13 test.c:34 (call (mem:QI (symbol_ref:DI ("network_term") [flags 0x3]  <function_decl 0x7f2f6c26eb00 network_term>) [0 S1 A8])
        (const_int 0 [0x0])) 639 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (nil)))

(insn 72 71 73 13 test.c:35 (set (reg:SI 0 ax [orig:58 D.49767 ] [58])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58


;; Succ edge  14 (fallthru)

;; Start of basic block ( 13 3 9) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 58
;; lr  def 	 0 [ax] 67

;; Pred edge  13 (fallthru)
;; Pred edge  3 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 73 72 74 14 58 "" [2 uses])

(note 74 73 82 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 82 74 91 14 test.c:36 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 14 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 91 82 0 NOTE_INSN_DELETED)

