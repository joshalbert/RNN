
;; Function main (main)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r73: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a4 (r73,l0) best SIREG, cover GENERAL_REGS
    r72: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a5 (r72,l0) best CREG, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r61,l0) best AREG, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r59,l0) best DIREG, cover GENERAL_REGS
    r58: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a3 (r58,l0) best SSE_FIRST_REG, cover SSE_REGS

  a0(r61,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r58,l0) costs: AREG:8,8 DREG:8,8 CREG:8,8 BREG:8,8 SIREG:8,8 DIREG:8,8 AD_REGS:8,8 CLOBBERED_REGS:8,8 Q_REGS:8,8 NON_Q_REGS:8,8 LEGACY_REGS:8,8 GENERAL_REGS:8,8 SSE_FIRST_REG:-2,-2 SSE_REGS:0,0 FP_TOP_REG:8,8 FP_SECOND_REG:8,8 FLOAT_REGS:8,8 MEM:15
  a4(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a5(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a7(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a8(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a9(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a10(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a11(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a12(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a13(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a14(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8
  a15(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:8

   Insn 47(l0): point = 0
   Insn 44(l0): point = 2
   Insn 40(l0): point = 4
   Insn 39(l0): point = 6
   Insn 38(l0): point = 8
   Insn 37(l0): point = 10
   Insn 36(l0): point = 12
   Insn 35(l0): point = 14
   Insn 34(l0): point = 16
   Insn 33(l0): point = 18
   Insn 32(l0): point = 20
   Insn 31(l0): point = 22
   Insn 30(l0): point = 24
   Insn 29(l0): point = 26
   Insn 28(l0): point = 28
   Insn 27(l0): point = 30
   Insn 26(l0): point = 32
   Insn 25(l0): point = 34
   Insn 24(l0): point = 36
   Insn 23(l0): point = 38
   Insn 22(l0): point = 40
   Insn 21(l0): point = 42
   Insn 20(l0): point = 44
   Insn 19(l0): point = 46
   Insn 18(l0): point = 48
   Insn 17(l0): point = 50
   Insn 16(l0): point = 52
   Insn 15(l0): point = 54
   Insn 14(l0): point = 56
   Insn 13(l0): point = 58
   Insn 12(l0): point = 60
   Insn 11(l0): point = 62
   Insn 10(l0): point = 64
   Insn 9(l0): point = 66
   Insn 8(l0): point = 68
   Insn 7(l0): point = 70
   Insn 6(l0): point = 72
   Insn 5(l0): point = 74
 a0(r61): [3..4]
 a1(r60): [5..6]
 a2(r59): [13..16]
 a3(r58): [15..18]
 a4(r73): [25..32]
 a5(r72): [29..34]
 a6(r71): [37..38]
 a7(r70): [41..42]
 a8(r69): [45..46]
 a9(r68): [49..50]
 a10(r67): [53..54]
 a11(r66): [57..58]
 a12(r65): [61..62]
 a13(r64): [65..66]
 a14(r63): [69..70]
 a15(r62): [73..74]
Compressing live ranges: from 77 to 32 - 41%
Ranges after the compression:
 a0(r61): [0..1]
 a1(r60): [2..3]
 a2(r59): [4..6]
 a3(r58): [5..7]
 a4(r73): [8..10]
 a5(r72): [9..11]
 a6(r71): [12..13]
 a7(r70): [14..15]
 a8(r69): [16..17]
 a9(r68): [18..19]
 a10(r67): [20..21]
 a11(r66): [22..23]
 a12(r65): [24..25]
 a13(r64): [26..27]
 a14(r63): [28..29]
 a15(r62): [30..31]
  regions=1, blocks=3, points=32
    allocnos=16, copies=0, conflicts=0, ranges=16
Disposition:
    3:r58  l0    21    2:r59  l0     0    1:r60  l0     0    0:r61  l0     0
   15:r62  l0     0   14:r63  l0     0   13:r64  l0     0   12:r65  l0     0
   11:r66  l0     0   10:r67  l0     0    9:r68  l0     0    8:r69  l0     0
    7:r70  l0     0    6:r71  l0     0    5:r72  l0     1    4:r73  l0     0
+++Costs: overall -6, reg -6, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 62
insn=6, live_throughout: 7, dead_or_set: 62
insn=7, live_throughout: 7, dead_or_set: 63
insn=8, live_throughout: 7, dead_or_set: 63
insn=9, live_throughout: 7, dead_or_set: 64
insn=10, live_throughout: 7, dead_or_set: 64
insn=11, live_throughout: 7, dead_or_set: 65
insn=12, live_throughout: 7, dead_or_set: 65
insn=13, live_throughout: 7, dead_or_set: 66
insn=14, live_throughout: 7, dead_or_set: 66
insn=15, live_throughout: 7, dead_or_set: 67
insn=16, live_throughout: 7, dead_or_set: 67
insn=17, live_throughout: 7, dead_or_set: 68
insn=18, live_throughout: 7, dead_or_set: 68
insn=19, live_throughout: 7, dead_or_set: 69
insn=20, live_throughout: 7, dead_or_set: 69
insn=21, live_throughout: 7, dead_or_set: 70
insn=22, live_throughout: 7, dead_or_set: 70
insn=23, live_throughout: 7, dead_or_set: 71
insn=24, live_throughout: 7, dead_or_set: 71
insn=25, live_throughout: 7, dead_or_set: 72
insn=26, live_throughout: 7, 72, dead_or_set: 73
insn=27, live_throughout: 7, 72, 73, dead_or_set: 37
insn=28, live_throughout: 7, 37, 73, dead_or_set: 2, 72
insn=29, live_throughout: 2, 7, 37, 73, dead_or_set: 1
insn=30, live_throughout: 1, 2, 7, 37, dead_or_set: 4, 73
insn=31, live_throughout: 1, 2, 4, 7, 37, dead_or_set: 5
insn=32, live_throughout: 7, dead_or_set: 1, 2, 4, 5, 21, 37
insn=33, live_throughout: 7, dead_or_set: 21, 58
insn=34, live_throughout: 7, 58, dead_or_set: 59
insn=35, live_throughout: 7, 59, dead_or_set: 21, 58
insn=36, live_throughout: 7, 21, dead_or_set: 5, 59
insn=37, live_throughout: 5, 7, 21, dead_or_set: 0
insn=38, live_throughout: 7, dead_or_set: 0, 5, 21
insn=39, live_throughout: 7, dead_or_set: 60
insn=40, live_throughout: 7, dead_or_set: 60, 61
insn=44, live_throughout: 7, dead_or_set: 0, 61
insn=47, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 33
changing reg in insn 35
changing reg in insn 34
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 44
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 26
changing reg in insn 30
deleting insn with uid = 33.
deleting insn with uid = 35.
deleting insn with uid = 40.
deleting insn with uid = 44.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 38.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 37[r8]
;;  ref usage 	r0={17d,15u} r1={5d,2u} r2={4d,1u} r4={4d,1u} r5={5d,2u} r6={1d,14u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d} r18={2d} r19={2d} r20={1d,1u} r21={3d,1u} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,1u} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} 
;;    total ref usage 171{129d,42u,0e} in 34{32 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 cblas_test.c:6 (set (reg:DF 0 ax [62])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 6 5 7 2 cblas_test.c:6 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 x+0 S8 A128])
        (reg:DF 0 ax [62])) 104 {*movdf_integer_rex64} (nil))

(insn 7 6 8 2 cblas_test.c:6 (set (reg:DF 0 ax [63])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 8 7 9 2 cblas_test.c:6 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 x+8 S8 A64])
        (reg:DF 0 ax [63])) 104 {*movdf_integer_rex64} (nil))

(insn 9 8 10 2 cblas_test.c:6 (set (reg:DF 0 ax [64])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 10 9 11 2 cblas_test.c:6 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 x+16 S8 A128])
        (reg:DF 0 ax [64])) 104 {*movdf_integer_rex64} (nil))

(insn 11 10 12 2 cblas_test.c:6 (set (reg:DF 0 ax [65])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 12 11 13 2 cblas_test.c:6 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 x+24 S8 A64])
        (reg:DF 0 ax [65])) 104 {*movdf_integer_rex64} (nil))

(insn 13 12 14 2 cblas_test.c:6 (set (reg:DF 0 ax [66])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 14 13 15 2 cblas_test.c:6 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 x+32 S8 A128])
        (reg:DF 0 ax [66])) 104 {*movdf_integer_rex64} (nil))

(insn 15 14 16 2 cblas_test.c:7 (set (reg:DF 0 ax [67])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 16 15 17 2 cblas_test.c:7 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 y+0 S8 A128])
        (reg:DF 0 ax [67])) 104 {*movdf_integer_rex64} (nil))

(insn 17 16 18 2 cblas_test.c:7 (set (reg:DF 0 ax [68])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 18 17 19 2 cblas_test.c:7 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 y+8 S8 A64])
        (reg:DF 0 ax [68])) 104 {*movdf_integer_rex64} (nil))

(insn 19 18 20 2 cblas_test.c:7 (set (reg:DF 0 ax [69])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 20 19 21 2 cblas_test.c:7 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 y+16 S8 A128])
        (reg:DF 0 ax [69])) 104 {*movdf_integer_rex64} (nil))

(insn 21 20 22 2 cblas_test.c:7 (set (reg:DF 0 ax [70])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 22 21 23 2 cblas_test.c:7 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 y+24 S8 A64])
        (reg:DF 0 ax [70])) 104 {*movdf_integer_rex64} (nil))

(insn 23 22 24 2 cblas_test.c:7 (set (reg:DF 0 ax [71])
        (mem/u/c/i:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S8 A64])) 104 {*movdf_integer_rex64} (nil))

(insn 24 23 25 2 cblas_test.c:7 (set (mem/s/j:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 y+32 S8 A128])
        (reg:DF 0 ax [71])) 104 {*movdf_integer_rex64} (nil))

(insn 25 24 26 2 cblas_test.c:8 (parallel [
            (set (reg:DI 1 dx [72])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 26 25 27 2 cblas_test.c:8 (parallel [
            (set (reg:DI 0 ax [73])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) 253 {*adddi_1} (nil))

(insn 27 26 28 2 cblas_test.c:8 (set (reg:SI 37 r8)
        (const_int 2 [0x2])) 47 {*movsi_1} (nil))

(insn 28 27 29 2 cblas_test.c:8 (set (reg:DI 2 cx)
        (reg:DI 1 dx [72])) 89 {*movdi_1_rex64} (nil))

(insn 29 28 30 2 cblas_test.c:8 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) 47 {*movsi_1} (nil))

(insn 30 29 31 2 cblas_test.c:8 (set (reg:DI 4 si)
        (reg:DI 0 ax [73])) 89 {*movdi_1_rex64} (nil))

(insn 31 30 32 2 cblas_test.c:8 (set (reg:SI 5 di)
        (const_int 2 [0x2])) 47 {*movsi_1} (nil))

(call_insn 32 31 34 2 cblas_test.c:8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cblas_ddot") [flags 0x41]  <function_decl 0x7fd89998f600 cblas_ddot>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (expr_list:REG_DEP_TRUE (use (reg:SI 37 r8))
                        (nil)))))))

(insn 34 32 36 2 cblas_test.c:8 (set (reg/f:DI 0 ax [orig:59 D.4916 ] [59])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <string_cst 0x7fd8999e0c80>)) 89 {*movdi_1_rex64} (nil))

(insn 36 34 37 2 cblas_test.c:8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:59 D.4916 ] [59])) 89 {*movdi_1_rex64} (nil))

(insn 37 36 38 2 cblas_test.c:8 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) 62 {*movqi_1} (nil))

(call_insn 38 37 39 2 cblas_test.c:8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fd89abfb000 printf>) [0 S1 A8])
            (const_int 0 [0x0]))) 901 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DF 21 xmm0))
                (nil)))))

(insn 39 38 47 2 cblas_test.c:9 (set (reg:SI 0 ax [orig:60 D.4917 ] [60])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(insn 47 39 50 2 cblas_test.c:10 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 50 47 0 NOTE_INSN_DELETED)

